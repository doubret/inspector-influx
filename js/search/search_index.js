var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.2","fields":["title","body"],"fieldVectors":[["title/classes/DefaultSender.html",[0,0.672,1,1.351]],["body/classes/DefaultSender.html",[0,0.973,1,2.472,2,1.257,3,1,4,0.625,5,1.6,6,1.257,7,3.302,8,2.201,9,1.912,10,1.5,11,1.6,12,1.087,13,2.186,14,2.472,15,2.962,16,2.893,17,2.368,18,2.186,19,2.453,20,1.912,21,2.103,22,2.103,23,2.273,24,1.257,25,2.898,26,4.054,27,2.962,28,2.898,29,1.717,30,2.103,31,2.186,32,0.092,33,1.956,34,1.5,35,2.186,36,2.121,37,1.239,38,1.674,39,2.898,40,1.717,41,2.121,42,2.103,43,1.257,44,2.898,45,1.717,46,1.367,47,0.855,48,2.121,49,2.898,50,2.491,51,2.898,52,2.898,53,2.103,54,2.201,55,2.121,56,1.087,57,1.717,58,1.956,59,1.717,60,2.201,61,2.121,62,1.717,63,2.103,64,1.367,65,0.796,66,1.717,67,2.326,68,1.717,69,2.121,70,2.121,71,0.625,72,2.121,73,1.367,74,2.121,75,1.956,76,2.121,77,2.121,78,1.717,79,1.257,80,2.121,81,2.121,82,1,83,2.121,84,2.898,85,1.257,86,2.121,87,0.059,88,0.059]],["title/interfaces/MetricEntry.html",[89,0.672,90,1.075]],["body/interfaces/MetricEntry.html",[0,0.422,2,0.503,3,0.676,4,0.25,6,0.503,8,0.503,9,0.876,10,1.38,12,0.319,13,1.08,14,2.479,17,0.503,19,1.666,20,1.029,21,0.503,22,0.503,23,1.293,24,0.503,29,0.503,30,1.938,32,0.093,33,0.849,34,1.468,37,0.537,38,0.4,40,0.503,42,0.849,43,2.127,45,0.503,46,1.898,47,1.202,53,1.666,54,2.393,56,0.697,57,0.503,58,1.566,59,0.503,60,2.127,62,0.849,63,1.938,64,1.029,65,1.52,66,1.444,67,2.416,68,2.375,71,0.643,73,1.836,75,0.849,78,1.884,79,2.319,82,1.451,85,1.101,87,0.029,88,0.029,89,0.907,90,1.326,91,0.4,92,1.08,93,1.08,94,2.121,95,2.398,96,1.838,97,2.229,98,1.646,99,2.064,100,0.64,101,2.398,102,1.884,103,1.822,104,1.938,105,2.467,106,1.938,107,1.444,108,1.401,109,1.293,110,1.08,111,1.401,112,1.401,113,1.646,114,1.613,115,1.838,116,0.4,117,0.503,118,1.444,119,0.64,120,1.08,121,0.64,122,0.64,123,1.08,124,1.08,125,1.326,126,1.646,127,0.64,128,1.401,129,1.444,130,1.08,131,2.398,132,1.08,133,1.08,134,0.503,135,1.08,136,1.401,137,1.246,138,2.854,139,1.08,140,0.64,141,0.64,142,1.401,143,1.08,144,0.64,145,1.401,146,0.64,147,0.503,148,1.08,149,0.64,150,0.64,151,0.64,152,0.64,153,0.64,154,0.64,155,0.64,156,0.64,157,0.64,158,0.849,159,0.64,160,0.64,161,0.64,162,0.64,163,1.401,164,0.64,165,1.08,166,0.64,167,1.401,168,0.64,169,0.64,170,0.64,171,2.527,172,1.646,173,0.64,174,1.401,175,1.838,176,0.64,177,0.64,178,0.64,179,1.08,180,0.64,181,0.64,182,1.646,183,0.64,184,0.64,185,0.4,186,0.64,187,1.08,188,0.503,189,0.64,190,1.08,191,0.64,192,0.64,193,1.08,194,1.08,195,0.64,196,0.64,197,0.64,198,0.64,199,0.64,200,0.503,201,0.64,202,2.121,203,3.187,204,0.64,205,0.64,206,0.64,207,1.08,208,0.64,209,0.64,210,0.64,211,0.64,212,1.401,213,0.64,214,0.64,215,1.401,216,0.64,217,0.64,218,1.401,219,0.64,220,0.64,221,1.401,222,0.64,223,1.08,224,0.64,225,1.401,226,1.08,227,1.646,228,1.08,229,0.64,230,0.64,231,0.64,232,1.401,233,0.64,234,2.229,235,0.64,236,0.64,237,0.64,238,0.64,239,0.64,240,0.64,241,0.64,242,0.64,243,0.64,244,0.64,245,0.64,246,0.64,247,0.64,248,0.64,249,0.64,250,1.838,251,2.527,252,1.646,253,0.64,254,2.229,255,0.64,256,0.64,257,0.64,258,1.401,259,0.64,260,1.08,261,0.64,262,0.64,263,0.64,264,1.401,265,1.08,266,1.08,267,1.08,268,1.08,269,1.08,270,1.08,271,1.08,272,1.08,273,1.08,274,1.08,275,1.08,276,1.08,277,1.08,278,1.08,279,1.08,280,1.08,281,1.08,282,1.08,283,1.08,284,1.08,285,0.64,286,0.64,287,0.64,288,0.64,289,1.08,290,0.64,291,1.08,292,0.64,293,1.08,294,0.64,295,1.08,296,0.64,297,0.64,298,0.64,299,0.64,300,0.64,301,0.64,302,0.64,303,0.64,304,0.64,305,0.64,306,0.64,307,1.08,308,0.64,309,1.401,310,1.08,311,0.64,312,0.64,313,1.646,314,0.64,315,0.64,316,0.64,317,1.08,318,0.64,319,0.64,320,0.64,321,0.64,322,0.64,323,0.64,324,0.64,325,1.646,326,0.64,327,0.64,328,0.64,329,0.64,330,0.64]],["title/interfaces/Sender.html",[10,0.855,89,0.672]],["body/interfaces/Sender.html",[0,0.419,2,0.498,3,0.67,4,0.248,6,0.498,8,0.498,9,1.143,10,1.417,12,0.316,14,2.477,17,0.842,18,1.072,19,1.659,20,1.023,21,1.285,22,1.285,23,1.743,24,0.498,27,1.392,29,0.498,30,1.877,31,0.634,32,0.093,33,1.093,34,1.458,35,0.634,37,0.533,38,0.67,40,0.498,42,0.842,43,2.058,45,0.842,46,1.88,47,1.197,53,1.815,54,2.413,56,0.692,57,0.498,58,1.815,59,0.842,60,2.174,62,0.842,63,2.021,64,1.023,65,1.518,66,1.436,67,2.413,68,2.371,71,0.639,73,1.832,75,0.842,78,1.877,79,2.256,82,1.445,85,1.093,87,0.029,88,0.029,89,0.903,90,1.24,91,0.397,92,0.634,93,0.634,94,1.636,95,2.219,96,1.072,97,1.828,98,1.392,99,2.058,100,0.634,101,2.39,102,1.877,103,1.815,104,1.931,105,2.459,106,1.931,107,1.436,108,1.392,109,1.285,110,1.072,111,1.392,112,1.392,113,1.636,114,1.609,115,1.828,116,0.397,117,0.498,118,1.436,119,1.072,120,1.392,121,1.072,122,1.072,123,1.392,124,1.072,125,1.32,126,1.636,127,0.634,128,1.392,129,1.436,130,1.072,131,2.39,132,1.072,133,1.072,134,0.498,135,1.072,136,1.392,137,1.24,138,2.849,139,1.072,140,0.634,141,0.634,142,1.392,143,1.072,144,0.634,145,1.392,146,0.634,147,0.498,148,1.072,149,0.634,150,0.634,151,0.634,152,0.634,153,0.634,154,0.634,155,0.634,156,0.634,157,0.634,158,0.842,159,0.634,160,0.634,161,0.634,162,0.634,163,1.392,164,0.634,165,1.072,166,0.634,167,1.392,168,0.634,169,0.634,170,0.634,171,2.519,172,1.636,173,0.634,174,1.392,175,1.828,176,0.634,177,0.634,178,0.634,179,1.072,180,0.634,181,0.634,182,1.636,183,0.634,184,0.634,185,0.397,186,0.634,187,1.072,188,0.498,189,0.634,190,1.072,191,0.634,192,0.634,193,1.072,194,1.072,195,0.634,196,0.634,197,0.634,198,0.634,199,0.634,200,0.498,201,0.634,202,2.112,203,3.184,204,0.634,205,0.634,206,0.634,207,1.072,208,0.634,209,0.634,210,0.634,211,0.634,212,1.392,213,0.634,214,0.634,215,1.392,216,0.634,217,0.634,218,1.392,219,0.634,220,0.634,221,1.392,222,0.634,223,1.072,224,0.634,225,1.392,226,1.072,227,1.636,228,1.072,229,0.634,230,0.634,231,0.634,232,1.392,233,0.634,234,2.219,235,0.634,236,0.634,237,0.634,238,0.634,239,0.634,240,0.634,241,0.634,242,0.634,243,0.634,244,0.634,245,0.634,246,0.634,247,0.634,248,0.634,249,0.634,250,1.828,251,2.519,252,1.636,253,0.634,254,2.219,255,0.634,256,0.634,257,0.634,258,1.392,259,0.634,260,1.072,261,0.634,262,0.634,263,0.634,264,1.392,265,1.072,266,1.072,267,1.072,268,1.072,269,1.072,270,1.072,271,1.072,272,1.072,273,1.072,274,1.072,275,1.072,276,1.072,277,1.072,278,1.072,279,1.072,280,1.072,281,1.072,282,1.072,283,1.072,284,1.072,285,0.634,286,0.634,287,0.634,288,0.634,289,1.072,290,0.634,291,1.072,292,0.634,293,1.072,294,0.634,295,1.072,296,0.634,297,0.634,298,0.634,299,0.634,300,0.634,301,0.634,302,0.634,303,0.634,304,0.634,305,0.634,306,0.634,307,1.072,308,0.634,309,1.392,310,1.072,311,0.634,312,0.634,313,1.636,314,0.634,315,0.634,316,0.634,317,1.072,318,0.634,319,0.634,320,0.634,321,0.634,322,0.634,323,0.634,324,0.634,325,1.636,326,0.634,327,0.634,328,0.634,329,0.634,330,0.634,331,0.841,332,0.841,333,0.841]],["title/coverage.html",[334,1.803]],["body/coverage.html",[0,1.127,1,1.944,4,0.968,5,2.475,10,1.231,32,0.088,34,1.231,65,1.231,71,0.968,87,0.078,88,0.078,89,1.127,90,1.548,91,1.907,334,1.944,335,2.475,336,3.281,337,2.475,338,4.164,339,3.281,340,3.281,341,3.281,342,3.281,343,2.475,344,2.475]],["title/dependencies.html",[345,1.938,346,2.054]],["body/dependencies.html",[3,1.595,20,1.595,32,0.088,37,1.268,47,0.997,87,0.08,88,0.08,99,2.003,116,1.595,346,2.55,347,3.381,348,3.381,349,3.381,350,3.381,351,3.381]],["title/index.html",[12,0.727,56,0.727,185,0.914]],["body/index.html",[9,1.806,11,2.67,15,2.178,16,2.178,32,0.092,37,1.537,38,1.362,46,1.806,47,1.129,50,2.178,64,1.67,65,1.328,71,1.044,73,1.883,82,1.67,87,0.072,88,0.072,107,2.269,109,1.71,114,1.67,116,1.932,125,1.67,147,1.71,158,1.71,188,1.71,200,1.71,352,3.54,353,2.887,354,2.887,355,3.54,356,1.71,357,2.887,358,2.887,359,3.54,360,2.887,361,2.887,362,3.54,363,2.887,364,2.887,365,2.887,366,2.887,367,2.887,368,3.54,369,2.887,370,3.54,371,2.887,372,2.887,373,2.887,374,2.887,375,2.887,376,2.887,377,2.887,378,2.887,379,2.887,380,2.887,381,2.887,382,1.71,383,2.178]],["title/license.html",[56,0.727,185,0.914,382,1.148]],["body/license.html",[4,0.879,32,0.074,87,0.074,88,0.074,125,1.703,134,2.301,335,2.249,382,1.767,383,2.249,384,3.883,385,2.982,386,2.982,387,3.611,388,2.982,389,2.982,390,2.982,391,2.982,392,3.611,393,2.982,394,4.036,395,4.318,396,2.982,397,3.611,398,3.883,399,2.982,400,3.611,401,2.982,402,2.982,403,2.982,404,2.982,405,2.982,406,2.982,407,2.982,408,2.982,409,2.982,410,2.982,411,2.982,412,2.982,413,2.982,414,2.982,415,3.611,416,3.611,417,2.982,418,2.982,419,2.982,420,3.611,421,2.982,422,2.982,423,2.982,424,2.982,425,2.982,426,2.982,427,2.982,428,2.982,429,2.982,430,2.982,431,2.982,432,2.982,433,2.982,434,2.982,435,2.982,436,2.982,437,2.982,438,2.982,439,2.982,440,2.982,441,2.982,442,2.982,443,2.982]],["title/modules.html",[356,1.803]],["body/modules.html",[32,0.081,87,0.081,88,0.081,356,2.058]],["title/overview.html",[444,2.295]],["body/overview.html",[0,1.017,32,0.08,87,0.08,88,0.08,89,1.017,444,2.601,445,3.933]],["title/miscellaneous/typealiases.html",[446,1.462,447,2.722]],["body/miscellaneous/typealiases.html",[12,1.257,32,0.088,34,1.451,47,0.988,87,0.079,88,0.079,91,1.581,102,1.986,103,1.986,104,1.986,106,1.986,114,1.581,117,1.986,118,2.417,446,2.528,448,3.351,449,3.351]],["title/unit-test.html",[137,1.162,450,1.858]],["body/unit-test.html",[4,1.006,32,0.08,71,1.006,87,0.08,88,0.08,129,2.021,137,1.609,334,2.021,337,2.573,343,2.573,344,2.573,450,2.573,451,3.411,452,3.411]]],"invertedIndex":[["",{"_index":32,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["0",{"_index":82,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["0.5.9",{"_index":351,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":158,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["1.11.0",{"_index":349,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":338,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":157,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["2",{"_index":445,"title":{},"body":{"overview.html":{}}}],["2.6.1",{"_index":347,"title":{},"body":{"dependencies.html":{}}}],["2017",{"_index":386,"title":{},"body":{"license.html":{}}}],["3/3",{"_index":341,"title":{},"body":{"coverage.html":{}}}],["34/34",{"_index":340,"title":{},"body":{"coverage.html":{}}}],["4/4",{"_index":342,"title":{},"body":{"coverage.html":{}}}],["5.0.7",{"_index":348,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":339,"title":{},"body":{"coverage.html":{}}}],["8086",{"_index":372,"title":{},"body":{"index.html":{}}}],["abov",{"_index":414,"title":{},"body":{"license.html":{}}}],["abstract",{"_index":119,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["action",{"_index":437,"title":{},"body":{"license.html":{}}}],["admin",{"_index":368,"title":{},"body":{"index.html":{}}}],["alias",{"_index":448,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alway",{"_index":241,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["and/or",{"_index":407,"title":{},"body":{"license.html":{}}}],["any).id",{"_index":233,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["aris",{"_index":441,"title":{},"body":{"license.html":{}}}],["arr",{"_index":80,"title":{},"body":{"classes/DefaultSender.html":{}}}],["assign",{"_index":139,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["associ",{"_index":396,"title":{},"body":{"license.html":{}}}],["async",{"_index":20,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"dependencies.html":{}}}],["async.asyncqueu",{"_index":143,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["async.queue((task",{"_index":169,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["author",{"_index":430,"title":{},"body":{"license.html":{}}}],["await",{"_index":75,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["b",{"_index":381,"title":{},"body":{"index.html":{}}}],["basic",{"_index":361,"title":{},"body":{"index.html":{}}}],["befor",{"_index":52,"title":{},"body":{"classes/DefaultSender.html":{}}}],["boolean",{"_index":42,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["branch",{"_index":451,"title":{},"body":{"unit-test.html":{}}}],["build",{"_index":227,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["buildtags(tagg",{"_index":314,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["c",{"_index":385,"title":{},"body":{"license.html":{}}}],["callback",{"_index":172,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["catch",{"_index":324,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["certain",{"_index":223,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["chang",{"_index":234,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["charg",{"_index":391,"title":{},"body":{"license.html":{}}}],["claim",{"_index":433,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/DefaultSender.html":{}},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"coverage.html":{},"overview.html":{}}}],["clb",{"_index":170,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["client",{"_index":38,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["clock",{"_index":101,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["clock=new",{"_index":153,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["collect",{"_index":222,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["comput",{"_index":258,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["condit",{"_index":413,"title":{},"body":{"license.html":{}}}],["config",{"_index":15,"title":{},"body":{"classes/DefaultSender.html":{},"index.html":{}}}],["configur",{"_index":39,"title":{},"body":{"classes/DefaultSender.html":{}}}],["connect",{"_index":443,"title":{},"body":{"license.html":{}}}],["consol",{"_index":146,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["const",{"_index":73,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["constructor",{"_index":24,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["constructor(config",{"_index":25,"title":{},"body":{"classes/DefaultSender.html":{}}}],["contract",{"_index":438,"title":{},"body":{"license.html":{}}}],["copi",{"_index":394,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":384,"title":{},"body":{"license.html":{}}}],["counter",{"_index":102,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"miscellaneous/typealiases.html":{}}}],["counter.getcount",{"_index":207,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["coverag",{"_index":334,"title":{"coverage.html":{}},"body":{"coverage.html":{},"unit-test.html":{}}}],["creat",{"_index":29,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["current",{"_index":127,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["damag",{"_index":434,"title":{},"body":{"license.html":{}}}],["data",{"_index":53,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["databas",{"_index":50,"title":{},"body":{"classes/DefaultSender.html":{},"index.html":{}}}],["date",{"_index":203,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["date(this.clock.time().millisecond",{"_index":204,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["db",{"_index":16,"title":{},"body":{"classes/DefaultSender.html":{},"index.html":{}}}],["dbconfig",{"_index":366,"title":{},"body":{"index.html":{}}}],["deal",{"_index":397,"title":{},"body":{"license.html":{}}}],["default",{"_index":7,"title":{},"body":{"classes/DefaultSender.html":{}}}],["defaultsend",{"_index":1,"title":{"classes/DefaultSender.html":{}},"body":{"classes/DefaultSender.html":{},"coverage.html":{}}}],["defin",{"_index":27,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/Sender.html":{}}}],["depend",{"_index":346,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["descript",{"_index":6,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["determin",{"_index":126,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["differ",{"_index":229,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["distribut",{"_index":405,"title":{},"body":{"license.html":{}}}],["document",{"_index":335,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["each",{"_index":148,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["ensur",{"_index":49,"title":{},"body":{"classes/DefaultSender.html":{}}}],["entri",{"_index":92,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["enumer",{"_index":117,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"miscellaneous/typealiases.html":{}}}],["even",{"_index":155,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["event",{"_index":429,"title":{},"body":{"license.html":{}}}],["exampl",{"_index":11,"title":{},"body":{"classes/DefaultSender.html":{},"index.html":{}}}],["exist",{"_index":51,"title":{},"body":{"classes/DefaultSender.html":{}}}],["export",{"_index":66,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["express",{"_index":422,"title":{},"body":{"license.html":{}}}],["extend",{"_index":124,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["failur",{"_index":144,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["fals",{"_index":44,"title":{},"body":{"classes/DefaultSender.html":{}}}],["few",{"_index":379,"title":{},"body":{"index.html":{}}}],["field",{"_index":251,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["fieldnameprefix",{"_index":252,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}count",{"_index":264,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}m15_r",{"_index":289,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}m1_r",{"_index":291,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}m5_r",{"_index":293,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}max",{"_index":265,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}mean",{"_index":267,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}mean_r",{"_index":295,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}min",{"_index":269,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}p50",{"_index":271,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}p75",{"_index":273,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}p95",{"_index":275,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}p98",{"_index":277,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}p99",{"_index":279,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}p999",{"_index":281,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}stddev",{"_index":283,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}valu",{"_index":256,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["file",{"_index":4,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"coverage.html":{},"license.html":{},"unit-test.html":{}}}],["final",{"_index":328,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["fit",{"_index":425,"title":{},"body":{"license.html":{}}}],["follow",{"_index":412,"title":{},"body":{"license.html":{}}}],["free",{"_index":390,"title":{},"body":{"license.html":{}}}],["function",{"_index":129,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"unit-test.html":{}}}],["furnish",{"_index":410,"title":{},"body":{"license.html":{}}}],["gaug",{"_index":103,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"miscellaneous/typealiases.html":{}}}],["gauge.getvalu",{"_index":212,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["get",{"_index":56,"title":{"index.html":{},"license.html":{}},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["getfieldnameprefix(metr",{"_index":308,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["getlog",{"_index":181,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["getmeasurementname(metr",{"_index":311,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["getnumber(valu",{"_index":330,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["gettag",{"_index":178,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["given",{"_index":123,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["grant",{"_index":389,"title":{},"body":{"license.html":{}}}],["haschanged(metricid",{"_index":244,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["herebi",{"_index":388,"title":{},"body":{"license.html":{}}}],["histogram",{"_index":104,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"miscellaneous/typealiases.html":{}}}],["histogram.getcount",{"_index":215,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["histogram.getsnapshot",{"_index":261,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["holder",{"_index":431,"title":{},"body":{"license.html":{}}}],["host",{"_index":370,"title":{},"body":{"index.html":{}}}],["https://github.com/nod",{"_index":363,"title":{},"body":{"index.html":{}}}],["iclusterconfig",{"_index":26,"title":{},"body":{"classes/DefaultSender.html":{}}}],["identifi",{"_index":336,"title":{},"body":{"coverage.html":{}}}],["implement",{"_index":8,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["impli",{"_index":423,"title":{},"body":{"license.html":{}}}],["import",{"_index":64,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["includ",{"_index":134,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"license.html":{}}}],["index",{"_index":12,"title":{"index.html":{}},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"miscellaneous/typealiases.html":{}}}],["indic",{"_index":45,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["influx",{"_index":37,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"dependencies.html":{},"index.html":{}}}],["influx/blob/master/src/index.ts#l80",{"_index":365,"title":{},"body":{"index.html":{}}}],["influx/nod",{"_index":364,"title":{},"body":{"index.html":{}}}],["influxdb",{"_index":9,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["influxdb(config",{"_index":72,"title":{},"body":{"classes/DefaultSender.html":{}}}],["influxmetricreport",{"_index":65,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"coverage.html":{},"index.html":{}}}],["influxmetricreporter(dbconfig",{"_index":373,"title":{},"body":{"index.html":{}}}],["info",{"_index":2,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["init",{"_index":21,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["initi",{"_index":121,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["inspector",{"_index":116,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"dependencies.html":{},"index.html":{}}}],["instal",{"_index":359,"title":{},"body":{"index.html":{}}}],["instanc",{"_index":30,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["interfac",{"_index":89,"title":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"coverage.html":{},"overview.html":{}}}],["interv",{"_index":131,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["interval=1000",{"_index":150,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["ipoint",{"_index":60,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["isnan(valu",{"_index":250,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["isreadi",{"_index":22,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["key",{"_index":313,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["kind",{"_index":421,"title":{},"body":{"license.html":{}}}],["last",{"_index":94,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["lastmodifiedfunct",{"_index":228,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["lastmodifiedfunction(metr",{"_index":236,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["lastreport",{"_index":96,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["lastvalu",{"_index":97,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["liabil",{"_index":435,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":432,"title":{},"body":{"license.html":{}}}],["lib/.../influxmetricreporter.t",{"_index":449,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lib/metrics/defaultsender.t",{"_index":5,"title":{},"body":{"classes/DefaultSender.html":{},"coverage.html":{}}}],["lib/metrics/defaultsender.ts:20",{"_index":41,"title":{},"body":{"classes/DefaultSender.html":{}}}],["lib/metrics/defaultsender.ts:28",{"_index":36,"title":{},"body":{"classes/DefaultSender.html":{}}}],["lib/metrics/defaultsender.ts:36",{"_index":28,"title":{},"body":{"classes/DefaultSender.html":{}}}],["lib/metrics/defaultsender.ts:54",{"_index":48,"title":{},"body":{"classes/DefaultSender.html":{}}}],["lib/metrics/defaultsender.ts:69",{"_index":55,"title":{},"body":{"classes/DefaultSender.html":{}}}],["lib/metrics/defaultsender.ts:79",{"_index":61,"title":{},"body":{"classes/DefaultSender.html":{}}}],["lib/metrics/influxmetricreporter.t",{"_index":91,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["lib/metrics/influxmetricreporter.ts:43",{"_index":332,"title":{},"body":{"interfaces/Sender.html":{}}}],["lib/metrics/influxmetricreporter.ts:51",{"_index":331,"title":{},"body":{"interfaces/Sender.html":{}}}],["lib/metrics/influxmetricreporter.ts:60",{"_index":333,"title":{},"body":{"interfaces/Sender.html":{}}}],["librari",{"_index":353,"title":{},"body":{"index.html":{}}}],["licens",{"_index":382,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["limit",{"_index":400,"title":{},"body":{"license.html":{}}}],["line",{"_index":452,"title":{},"body":{"unit-test.html":{}}}],["link",{"_index":193,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["log",{"_index":145,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["logger",{"_index":105,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["logmetadata",{"_index":141,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["made",{"_index":354,"title":{},"body":{"index.html":{}}}],["map",{"_index":99,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"dependencies.html":{}}}],["match",{"_index":88,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["meant",{"_index":357,"title":{},"body":{"index.html":{}}}],["measur",{"_index":254,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["memberof",{"_index":67,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["merchant",{"_index":424,"title":{},"body":{"license.html":{}}}],["merg",{"_index":403,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":140,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["meter",{"_index":106,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"miscellaneous/typealiases.html":{}}}],["meter.getcount",{"_index":218,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["method",{"_index":18,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/Sender.html":{}}}],["metric",{"_index":47,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["metric'",{"_index":312,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["metric.getgroup",{"_index":309,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["metric.getnam",{"_index":310,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["metricentri",{"_index":90,"title":{"interfaces/MetricEntry.html":{}},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"coverage.html":{}}}],["metricentry.lastreport",{"_index":248,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["metricentry.lastvalu",{"_index":247,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["metricid",{"_index":232,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["metricregistri",{"_index":107,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["metricreport",{"_index":108,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["metrics.foreach((metr",{"_index":231,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["metricst",{"_index":149,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["metrictyp",{"_index":118,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"miscellaneous/typealiases.html":{}}}],["millisecond",{"_index":109,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["minim",{"_index":132,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["minimum",{"_index":242,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["minreportingtimeout",{"_index":135,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["minreportingtimeout=1",{"_index":154,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["minut",{"_index":110,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["minute.convertto(minreportingtimeout",{"_index":166,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["miscellan",{"_index":446,"title":{"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/typealiases.html":{}}}],["mit",{"_index":383,"title":{},"body":{"index.html":{},"license.html":{}}}],["modifi",{"_index":402,"title":{},"body":{"license.html":{}}}],["modul",{"_index":356,"title":{"modules.html":{}},"body":{"index.html":{},"modules.html":{}}}],["monotonecount",{"_index":111,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["name",{"_index":33,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["names.find((valu",{"_index":77,"title":{},"body":{"classes/DefaultSender.html":{}}}],["new",{"_index":71,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"coverage.html":{},"index.html":{},"unit-test.html":{}}}],["node",{"_index":355,"title":{},"body":{"index.html":{}}}],["nodejs.it",{"_index":358,"title":{},"body":{"index.html":{}}}],["nodejs.tim",{"_index":130,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["noninfring",{"_index":428,"title":{},"body":{"license.html":{}}}],["notic",{"_index":415,"title":{},"body":{"license.html":{}}}],["now",{"_index":202,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["npm",{"_index":360,"title":{},"body":{"index.html":{}}}],["null",{"_index":175,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["number",{"_index":79,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["object",{"_index":40,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["obtain",{"_index":393,"title":{},"body":{"license.html":{}}}],["option",{"_index":35,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/Sender.html":{}}}],["otherwis",{"_index":440,"title":{},"body":{"license.html":{}}}],["out",{"_index":442,"title":{},"body":{"license.html":{}}}],["overview",{"_index":444,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packag",{"_index":345,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":68,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["paramet",{"_index":31,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/Sender.html":{}}}],["particular",{"_index":426,"title":{},"body":{"license.html":{}}}],["password",{"_index":369,"title":{},"body":{"index.html":{}}}],["period",{"_index":184,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["permiss",{"_index":387,"title":{},"body":{"license.html":{}}}],["permit",{"_index":409,"title":{},"body":{"license.html":{}}}],["person",{"_index":392,"title":{},"body":{"license.html":{}}}],["point",{"_index":63,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["points.length",{"_index":239,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["points.push(point",{"_index":238,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["port",{"_index":371,"title":{},"body":{"index.html":{}}}],["portion",{"_index":418,"title":{},"body":{"license.html":{}}}],["prefix",{"_index":307,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["privat",{"_index":14,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["process",{"_index":122,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["promis",{"_index":58,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["properti",{"_index":13,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{}}}],["provid",{"_index":419,"title":{},"body":{"license.html":{}}}],["public",{"_index":19,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["publish",{"_index":404,"title":{},"body":{"license.html":{}}}],["purpos",{"_index":427,"title":{},"body":{"license.html":{}}}],["queue",{"_index":142,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["reach",{"_index":243,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["readi",{"_index":17,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["reason",{"_index":325,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["refer",{"_index":98,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["regist",{"_index":192,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["registri",{"_index":200,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["registry.newtimer(\"request",{"_index":375,"title":{},"body":{"index.html":{}}}],["report",{"_index":46,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["reporter.addmetricregistry(registri",{"_index":377,"title":{},"body":{"index.html":{}}}],["reporter.setlog(global.consol",{"_index":376,"title":{},"body":{"index.html":{}}}],["reporter.start",{"_index":378,"title":{},"body":{"index.html":{}}}],["reportfunct",{"_index":226,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["reportfunction(metr",{"_index":237,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["reportgauge(gaug",{"_index":249,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["reporthistogram(histogram",{"_index":259,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["reportmeter(met",{"_index":286,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["reportmetr",{"_index":230,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["reportmetricregistry(registri",{"_index":201,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["reporttimer(tim",{"_index":298,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["request",{"_index":374,"title":{},"body":{"index.html":{}}}],["requests.tim",{"_index":380,"title":{},"body":{"index.html":{}}}],["restrict",{"_index":399,"title":{},"body":{"license.html":{}}}],["result",{"_index":87,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["return",{"_index":54,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["right",{"_index":401,"title":{},"body":{"license.html":{}}}],["save",{"_index":147,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["schedul",{"_index":128,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["sell",{"_index":408,"title":{},"body":{"license.html":{}}}],["send",{"_index":23,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["send(point",{"_index":59,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["sender",{"_index":10,"title":{"interfaces/Sender.html":{}},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"coverage.html":{}}}],["senderreadi",{"_index":194,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["sendpoints(point",{"_index":319,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["set",{"_index":179,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["setinterv",{"_index":188,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["setlog(log",{"_index":183,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["settags(tag",{"_index":180,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["shall",{"_index":416,"title":{},"body":{"license.html":{}}}],["snapshot",{"_index":260,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["softwar",{"_index":395,"title":{},"body":{"license.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"dependencies.html":{}}}],["specif",{"_index":329,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["specifi",{"_index":62,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["start",{"_index":185,"title":{"index.html":{},"license.html":{}},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["state",{"_index":57,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["statement",{"_index":337,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["stdclock",{"_index":112,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["stop",{"_index":190,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["string",{"_index":78,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["subject",{"_index":411,"title":{},"body":{"license.html":{}}}],["sublicens",{"_index":406,"title":{},"body":{"license.html":{}}}],["substanti",{"_index":417,"title":{},"body":{"license.html":{}}}],["super",{"_index":159,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["support",{"_index":350,"title":{},"body":{"dependencies.html":{}}}],["support/regist",{"_index":100,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["t",{"_index":225,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["tabl",{"_index":344,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tablesort(document.getelementbyid('coverag",{"_index":343,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tag",{"_index":138,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["taggabl",{"_index":113,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["taggable.gettags().foreach((tag",{"_index":318,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["tags=new",{"_index":152,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["tags[key",{"_index":317,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["task(callback",{"_index":173,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["templat",{"_index":224,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["test",{"_index":450,"title":{"unit-test.html":{}},"body":{"unit-test.html":{}}}],["this.buildtags(gaug",{"_index":257,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.buildtags(histogram",{"_index":285,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.buildtags(met",{"_index":297,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.buildtags(tim",{"_index":306,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.clock",{"_index":164,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.config",{"_index":69,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.config.databas",{"_index":74,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.db",{"_index":70,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.db.createdatabase(databas",{"_index":83,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.db.getdatabasenam",{"_index":76,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.db.writepoints(point",{"_index":86,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.getfieldnameprefix(gaug",{"_index":253,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getfieldnameprefix(histogram",{"_index":262,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getfieldnameprefix(met",{"_index":287,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getfieldnameprefix(tim",{"_index":300,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getmeasurementname(gaug",{"_index":255,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getmeasurementname(histogram",{"_index":263,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getmeasurementname(met",{"_index":288,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getmeasurementname(tim",{"_index":301,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(meter.get15minuter",{"_index":290,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(meter.get1minuter",{"_index":292,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(meter.get5minuter",{"_index":294,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(meter.getmeanr",{"_index":296,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.get75thpercentil",{"_index":274,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.get95thpercentil",{"_index":276,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.get98thpercentil",{"_index":278,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.get999thpercentil",{"_index":282,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.get99thpercentil",{"_index":280,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.getmax",{"_index":266,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.getmean",{"_index":268,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.getmedian",{"_index":272,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.getmin",{"_index":270,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.getstddev",{"_index":284,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(timer.get15minuter",{"_index":302,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(timer.get1minuter",{"_index":303,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(timer.get5minuter",{"_index":304,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(timer.getmeanr",{"_index":305,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.haschanged(metricid",{"_index":235,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.interv",{"_index":161,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.log",{"_index":182,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.log.debug(`wrot",{"_index":323,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.log.error(`error",{"_index":326,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.logmetadata",{"_index":167,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.metricregistri",{"_index":196,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.metricregistries.foreach((registri",{"_index":198,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.metricregistries.length",{"_index":197,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.metricstates.get(metricid",{"_index":246,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.metricstates.has(metricid",{"_index":245,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.minreportingtimeout",{"_index":165,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.queu",{"_index":168,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.queue.push((callback",{"_index":176,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.queue.push(async",{"_index":320,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.readi",{"_index":84,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.report",{"_index":189,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.reportcounter(count",{"_index":209,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.reportgauge(gaug",{"_index":211,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.reporthistogram(histogram",{"_index":214,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.reportmeter(met",{"_index":217,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.reportmetricregistry(registri",{"_index":199,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.reportmetrics(registry.getcounterlist",{"_index":208,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.reportmetrics(registry.getgaugelist",{"_index":210,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.reportmetrics(registry.gethistogramlist",{"_index":213,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.reportmetrics(registry.getmeterlist",{"_index":216,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.reportmetrics(registry.getmonotonecounterlist",{"_index":205,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.reportmetrics(registry.gettimerlist",{"_index":219,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.reportmonotonecounter(count",{"_index":206,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.reporttimer(tim",{"_index":220,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.send",{"_index":160,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.sender.init",{"_index":177,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.sender.isreadi",{"_index":195,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.sender.send(point",{"_index":322,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.sendpoints(point",{"_index":240,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.tag",{"_index":163,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.tags.foreach((tag",{"_index":316,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.tim",{"_index":187,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.timer.unref",{"_index":191,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.unit",{"_index":162,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.unit.convertto(this.interv",{"_index":186,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["time",{"_index":136,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["timeout",{"_index":133,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["timer",{"_index":114,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["timer.getcount",{"_index":221,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["timer.getsnapshot",{"_index":299,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["timestamp",{"_index":95,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["timeunit",{"_index":115,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["tort",{"_index":439,"title":{},"body":{"license.html":{}}}],["track",{"_index":93,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["tri",{"_index":321,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["trigger",{"_index":120,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["true",{"_index":85,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["type",{"_index":34,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["typealias",{"_index":447,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typescript",{"_index":352,"title":{},"body":{"index.html":{}}}],["unchang",{"_index":156,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["unit",{"_index":137,"title":{"unit-test.html":{}},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"unit-test.html":{}}}],["unit=millisecond",{"_index":151,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["unlock",{"_index":174,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["us",{"_index":125,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"index.html":{},"license.html":{}}}],["usag",{"_index":362,"title":{},"body":{"index.html":{}}}],["usernam",{"_index":367,"title":{},"body":{"index.html":{}}}],["valu",{"_index":43,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["value.localecompare(databas",{"_index":81,"title":{},"body":{"classes/DefaultSender.html":{}}}],["void",{"_index":171,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["warranti",{"_index":420,"title":{},"body":{"license.html":{}}}],["whether",{"_index":436,"title":{},"body":{"license.html":{}}}],["without",{"_index":398,"title":{},"body":{"license.html":{}}}],["write",{"_index":327,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["x",{"_index":315,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/DefaultSender.html":{"url":"classes/DefaultSender.html","title":"class - DefaultSender","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DefaultSender\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/DefaultSender.ts\n        \n\n            \n                Description\n            \n            \n                Default implementation for an influxdb sender.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Sender\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                config\n                            \n                            \n                                    Private\n                                db\n                            \n                            \n                                    Private\n                                ready\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                init\n                            \n                            \n                                    Public\n                                    Async\n                                isReady\n                            \n                            \n                                    Public\n                                    Async\n                                send\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(config: IClusterConfig)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/DefaultSender.ts:36\n                            \n                        \n\n                \n                    \n                            Creates an instance of DefaultSender.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    IClusterConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            config\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        config:     IClusterConfig\n\n                    \n                \n                    \n                        \n                            Type :     IClusterConfig\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/DefaultSender.ts:28\n                            \n                        \n\n                \n                    \n                        Influx client configuration object.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            db\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        db:     InfluxDB\n\n                    \n                \n                    \n                        \n                            Type :     InfluxDB\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/DefaultSender.ts:20\n                            \n                        \n\n                \n                    \n                        The influxdb client instance.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ready\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        ready:     boolean\n\n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/DefaultSender.ts:36\n                            \n                        \n\n                \n                    \n                        Indicates if he sender is ready to report metrics.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Async\n                            init\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        init()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/DefaultSender.ts:54\n                            \n                        \n\n\n                \n                    \n                            Ensures that a database is existing before sending data.\n\n\n                            \n                                Returns :     any\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Async\n                            isReady\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        isReady()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/DefaultSender.ts:69\n                            \n                        \n\n\n                \n                    \n                            Gets the ready state.\n\n\n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Async\n                            send\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        send(points: IPoint[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/DefaultSender.ts:79\n                            \n                        \n\n\n                \n                    \n                            Sends the specified data points to the DB.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        points\n                                                        \n                                                                    IPoint[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { IClusterConfig, InfluxDB, IPoint } from \"influx\";\nimport { Sender } from \"./InfluxMetricReporter\";\n\n/**\n * Default implementation for an influxdb sender.\n *\n * @export\n * @class DefaultSender\n * @implements {Sender}\n */\nexport class DefaultSender implements Sender {\n\n    /**\n     * The influxdb client instance.\n     *\n     * @private\n     * @type {InfluxDB}\n     * @memberof DefaultSender\n     */\n    private db: InfluxDB;\n    /**\n     * Influx client configuration object.\n     *\n     * @private\n     * @type {IClusterConfig}\n     * @memberof DefaultSender\n     */\n    private config: IClusterConfig;\n    /**\n     * Indicates if he sender is ready to report metrics.\n     *\n     * @private\n     * @type {boolean}\n     * @memberof DefaultSender\n     */\n    private ready: boolean = false;\n\n    /**\n     * Creates an instance of DefaultSender.\n     *\n     * @param {IClusterConfig} config\n     * @memberof DefaultSender\n     */\n    public constructor(config: IClusterConfig) {\n        this.config = config;\n        this.db = new InfluxDB(config);\n    }\n\n    /**\n     * Ensures that a database is existing before sending data.\n     *\n     * @memberof DefaultSender\n     */\n    public async init() {\n        const database = this.config.database;\n        const names = await this.db.getDatabaseNames();\n        if (!names.find((value: string, index: number, arr: string[]) => value.localeCompare(database) === 0)) {\n            await this.db.createDatabase(database);\n        }\n        this.ready = true;\n    }\n\n    /**\n     * Gets the ready state.\n     *\n     * @returns {Promise}\n     * @memberof DefaultSender\n     */\n    public async isReady(): Promise {\n        return this.ready;\n    }\n\n    /**\n     * Sends the specified data points to the DB.\n     *\n     * @param {IPoint[]} points\n     * @memberof DefaultSender\n     */\n    public async send(points: IPoint[]) {\n        await this.db.writePoints(points);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MetricEntry.html":{"url":"interfaces/MetricEntry.html","title":"interface - MetricEntry","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MetricEntry\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/InfluxMetricReporter.ts\n        \n\n            \n                Description\n            \n            \n                Entry interface to track the last value and timestamp of a metric instance.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        lastReport\n                                \n                                \n                                        lastValue\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        lastReport\n                                    \n                                \n                                \n                                    \n                                        lastReport:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Timestamp of the last reporting.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastValue\n                                    \n                                \n                                \n                                    \n                                        lastValue:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Last reported reference value.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport * as async from \"async\";\nimport { IPoint } from \"influx\";\nimport {\n    Clock,\n    Counter,\n    Gauge,\n    Histogram,\n    Logger,\n    Meter,\n    Metric,\n    MetricRegistry,\n    MetricReporter,\n    MILLISECOND,\n    MINUTE,\n    MonotoneCounter,\n    StdClock,\n    Taggable,\n    Timer,\n    TimeUnit,\n} from \"inspector-metrics\";\n\n/**\n * Enumeration of all metric types.\n */\nexport type MetricType = \"counter\" | \"gauge\" | \"histogram\" | \"meter\" | \"timer\";\n\n/**\n * Sender interface for influxdb client abstraction.\n *\n * @export\n * @interface Sender\n */\nexport interface Sender {\n\n    /**\n     * Indicates if the sender is ready to send data.\n     *\n     * @returns {Promise}\n     * @memberof Sender\n     */\n    isReady(): Promise;\n\n    /**\n     * Triggers the initialization process.\n     *\n     * @returns {Promise}\n     * @memberof Sender\n     */\n    init(): Promise;\n\n    /**\n     * Sends the given data points to influxdb.\n     *\n     * @param {IPoint[]} points\n     * @returns {Promise}\n     * @memberof Sender\n     */\n    send(points: IPoint[]): Promise;\n\n}\n\n/**\n * Entry interface to track the last value and timestamp of a metric instance.\n *\n * @interface MetricEntry\n */\ninterface MetricEntry {\n    /**\n     * Timestamp of the last reporting.\n     *\n     * @type {number}\n     * @memberof MetricEntry\n     */\n    lastReport: number;\n\n    /**\n     * Last reported reference value.\n     *\n     * @type {number}\n     * @memberof MetricEntry\n     */\n    lastValue: number;\n}\n\n/**\n * InfluxDB reporter implementation.\n *\n * @export\n * @class InfluxMetricReporter\n * @extends {MetricReporter}\n */\nexport class InfluxMetricReporter extends MetricReporter {\n\n    /**\n     * Clock used to determine the current timestamp.\n     *\n     * @private\n     * @type {Clock}\n     * @memberof InfluxMetricReporter\n     */\n    private clock: Clock;\n    /**\n     * Reference for the object returned by the scheduler function.\n     *\n     * @private\n     * @type {NodeJS.Timer}\n     * @memberof InfluxMetricReporter\n     */\n    private timer: NodeJS.Timer;\n    /**\n     * Reporting interval.\n     *\n     * @private\n     * @type {number}\n     * @memberof InfluxMetricReporter\n     */\n    private interval: number;\n    /**\n     * Minimal timeout to include a metric instance into a reporting.\n     *\n     * @private\n     * @type {number}\n     * @memberof InfluxMetricReporter\n     */\n    private minReportingTimeout: number;\n    /**\n     * Time unit for the reporting interval.\n     *\n     * @private\n     * @type {TimeUnit}\n     * @memberof InfluxMetricReporter\n     */\n    private unit: TimeUnit;\n    /**\n     * Tags assigned to this reporter instance - reported for every metric instance.\n     *\n     * @private\n     * @type {Map}\n     * @memberof InfluxMetricReporter\n     */\n    private tags: Map;\n    /**\n     * Metadata for the logger.\n     *\n     * @private\n     * @type {*}\n     * @memberof InfluxMetricReporter\n     */\n    private logMetadata: any;\n    /**\n     * async queue used to queue data point sending.\n     *\n     * @private\n     * @type {async.AsyncQueue}\n     * @memberof InfluxMetricReporter\n     */\n    private queue: async.AsyncQueue;\n    /**\n     * Minimal logger interface to report failures.\n     *\n     * @private\n     * @type {Logger}\n     * @memberof InfluxMetricReporter\n     */\n    private log: Logger = console;\n    /**\n     * Sender instance used to report metrics.\n     *\n     * @private\n     * @type {Sender}\n     * @memberof InfluxMetricReporter\n     */\n    private sender: Sender;\n    /**\n     * Saves the state of each reported metrics.\n     *\n     * @private\n     * @type {Map}\n     * @memberof InfluxMetricReporter\n     */\n    private metricStates: Map = new Map();\n\n    /**\n     * Creates an instance of InfluxMetricReporter.\n     *\n     * @param {Sender} sender The influx sender instance.\n     * @param {number} [interval=1000] The reporting interval.\n     * @param {TimeUnit} [unit=MILLISECOND] The time unit for the reporting interval.\n     * @param {Map} [tags=new Map()] Tags assigned to every metric.\n     * @param {Clock} [clock=new StdClock()] The clock - used to determine the timestamp of the metrics while reporting.\n     * @param {number} [minReportingTimeout=1] The time in minutes the report sends even unchanged metrics.\n     * @memberof InfluxMetricReporter\n     */\n    public constructor(\n        sender: Sender,\n        interval: number = 1000,\n        unit: TimeUnit = MILLISECOND,\n        tags: Map = new Map(),\n        clock: Clock = new StdClock(),\n        minReportingTimeout = 1) {\n        super();\n\n        this.sender = sender;\n        this.interval = interval;\n        this.unit = unit;\n        this.tags = tags;\n        this.clock = clock;\n        this.minReportingTimeout = MINUTE.convertTo(minReportingTimeout, MILLISECOND);\n\n        this.logMetadata = {\n            interval,\n            tags,\n            unit,\n        };\n\n        this.queue = async.queue((task: (clb: () => void) => void, callback: () => void) => {\n            task(callback);\n        }, 1);\n\n        let unlock: () => void = null;\n        this.queue.push((callback: () => void) => {\n            unlock = callback;\n        });\n\n        this.sender.init()\n            .then(() => unlock());\n    }\n\n    /**\n     * Gets the reporter tags.\n     *\n     * @returns {Map}\n     * @memberof InfluxMetricReporter\n     */\n    public getTags(): Map {\n        return this.tags;\n    }\n\n    /**\n     * Sets the reporter tags.\n     *\n     * @param {Map} tags\n     * @memberof InfluxMetricReporter\n     */\n    public setTags(tags: Map): void {\n        this.tags = tags;\n    }\n\n    /**\n     * Gets the logger instance.\n     *\n     * @returns {Logger}\n     * @memberof InfluxMetricReporter\n     */\n    public getLog(): Logger {\n        return this.log;\n    }\n\n    /**\n     * Sets the logger instance.\n     *\n     * @param {Logger} log\n     * @memberof InfluxMetricReporter\n     */\n    public setLog(log: Logger): void {\n        this.log = log;\n    }\n\n    /**\n     * Uses the scheduler function to trigger periodical reporting.\n     *\n     * @memberof InfluxMetricReporter\n     */\n    public start(): void {\n        const interval: number = this.unit.convertTo(this.interval, MILLISECOND);\n        this.timer = setInterval(() => this.report(), interval);\n    }\n\n    /**\n     * Stops the timer reference returned by the scheduler function.\n     *\n     * @memberof InfluxMetricReporter\n     */\n    public stop(): void {\n        if (this.timer) {\n            this.timer.unref();\n        }\n    }\n\n    /**\n     * Reports the data points for each registered {@link MetricRegistry}.\n     *\n     * @private\n     * @memberof InfluxMetricReporter\n     */\n    private async report() {\n        const senderReady = await this.sender.isReady();\n        if (senderReady && this.metricRegistries && this.metricRegistries.length > 0) {\n            this.metricRegistries.forEach((registry) => this.reportMetricRegistry(registry));\n        }\n    }\n\n    /**\n     * Reports the data points for the specified {@link MetricRegistry}.\n     *\n     * @private\n     * @param {MetricRegistry} registry\n     * @memberof InfluxMetricReporter\n     */\n    private reportMetricRegistry(registry: MetricRegistry): void {\n        const now: Date = new Date(this.clock.time().milliseconds);\n\n        this.reportMetrics(registry.getMonotoneCounterList(), now, \"counter\",\n            (counter: MonotoneCounter, date: Date) => this.reportMonotoneCounter(counter, date),\n            (counter: MonotoneCounter) => counter.getCount());\n        this.reportMetrics(registry.getCounterList(), now, \"counter\",\n            (counter: Counter, date: Date) => this.reportCounter(counter, date),\n            (counter: Counter) => counter.getCount());\n        this.reportMetrics(registry.getGaugeList(), now, \"gauge\",\n            (gauge: Gauge, date: Date) => this.reportGauge(gauge, date),\n            (gauge: Gauge) => gauge.getValue());\n        this.reportMetrics(registry.getHistogramList(), now, \"histogram\",\n            (histogram: Histogram, date: Date) => this.reportHistogram(histogram, date),\n            (histogram: Histogram) => histogram.getCount());\n        this.reportMetrics(registry.getMeterList(), now, \"meter\",\n            (meter: Meter, date: Date) => this.reportMeter(meter, date),\n            (meter: Meter) => meter.getCount());\n        this.reportMetrics(registry.getTimerList(), now, \"timer\",\n            (timer: Timer, date: Date) => this.reportTimer(timer, date),\n            (timer: Timer) => timer.getCount());\n    }\n\n    /**\n     * Reports a collection of metric instance for a certain type.\n     *\n     * @private\n     * @template T\n     * @param {T[]} metrics\n     * @param {Date} date\n     * @param {MetricType} type the type to report.\n     * @param {(metric: Metric, date: Date) => IPoint} reportFunction\n     *      The function to build the data points for a certain metric.\n     * @param {(metric: Metric) => number} lastModifiedFunction\n     *      function to determine if a metric has a different value since the last reporting.\n     * @memberof InfluxMetricReporter\n     */\n    private reportMetrics(\n        metrics: T[],\n        date: Date,\n        type: MetricType,\n        reportFunction: (metric: Metric, date: Date) => IPoint,\n        lastModifiedFunction: (metric: Metric) => number): void {\n\n        const points: IPoint[] = [];\n        metrics.forEach((metric) => {\n            const metricId = (metric as any).id;\n            let changed = true;\n            if (metricId) {\n                changed = this.hasChanged(metricId, lastModifiedFunction(metric), date);\n            }\n\n            if (changed) {\n                const point = reportFunction(metric, date);\n                if (!!point) {\n                    points.push(point);\n                }\n            }\n        });\n        if (points.length > 0) {\n            this.sendPoints(points, type);\n        }\n    }\n\n    /**\n     * Determines if the specified metric has changed. This is always true if\n     * the minimum-reporting timeout was reached.\n     *\n     * @private\n     * @param {number} metricId\n     * @param {number} lastValue\n     * @param {Date} date\n     * @returns {boolean}\n     * @memberof InfluxMetricReporter\n     */\n    private hasChanged(metricId: number, lastValue: number, date: Date): boolean {\n        let changed = true;\n        let metricEntry = {\n            lastReport: 0,\n            lastValue,\n        };\n        if (this.metricStates.has(metricId)) {\n            metricEntry = this.metricStates.get(metricId);\n            changed = metricEntry.lastValue !== lastValue;\n            if (!changed) {\n                changed = metricEntry.lastReport + this.minReportingTimeout } gauge\n     * @param {Date} date\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    private reportGauge(gauge: Gauge, date: Date): IPoint {\n        const value = gauge.getValue();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(gauge);\n        const measurement = this.getMeasurementName(gauge);\n\n        fields[`${fieldNamePrefix}value`] = gauge.getValue() || 0;\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(gauge),\n            timestamp: date,\n        };\n    }\n\n    /**\n     * Computes and reports the fields of the histogram.\n     *\n     * @private\n     * @param {Histogram} histogram\n     * @param {Date} date\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    private reportHistogram(histogram: Histogram, date: Date): IPoint {\n        const value = histogram.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const snapshot = histogram.getSnapshot();\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(histogram);\n        const measurement = this.getMeasurementName(histogram);\n\n        fields[`${fieldNamePrefix}count`] = histogram.getCount() || 0;\n        fields[`${fieldNamePrefix}max`] = this.getNumber(snapshot.getMax());\n        fields[`${fieldNamePrefix}mean`] = this.getNumber(snapshot.getMean());\n        fields[`${fieldNamePrefix}min`] = this.getNumber(snapshot.getMin());\n        fields[`${fieldNamePrefix}p50`] = this.getNumber(snapshot.getMedian());\n        fields[`${fieldNamePrefix}p75`] = this.getNumber(snapshot.get75thPercentile());\n        fields[`${fieldNamePrefix}p95`] = this.getNumber(snapshot.get95thPercentile());\n        fields[`${fieldNamePrefix}p98`] = this.getNumber(snapshot.get98thPercentile());\n        fields[`${fieldNamePrefix}p99`] = this.getNumber(snapshot.get99thPercentile());\n        fields[`${fieldNamePrefix}p999`] = this.getNumber(snapshot.get999thPercentile());\n        fields[`${fieldNamePrefix}stddev`] = this.getNumber(snapshot.getStdDev());\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(histogram),\n            timestamp: date,\n        };\n    }\n\n    /**\n     * Computes and reports the fields of the meter.\n     *\n     * @private\n     * @param {Meter} meter\n     * @param {Date} date\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    private reportMeter(meter: Meter, date: Date): IPoint {\n        const value = meter.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(meter);\n        const measurement = this.getMeasurementName(meter);\n\n        fields[`${fieldNamePrefix}count`] = meter.getCount() || 0;\n        fields[`${fieldNamePrefix}m15_rate`] = this.getNumber(meter.get15MinuteRate());\n        fields[`${fieldNamePrefix}m1_rate`] = this.getNumber(meter.get1MinuteRate());\n        fields[`${fieldNamePrefix}m5_rate`] = this.getNumber(meter.get5MinuteRate());\n        fields[`${fieldNamePrefix}mean_rate`] = this.getNumber(meter.getMeanRate());\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(meter),\n            timestamp: date,\n        };\n    }\n\n    /**\n     * Computes and reports the fields of the timer.\n     *\n     * @private\n     * @param {Timer} timer\n     * @param {Date} date\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    private reportTimer(timer: Timer, date: Date): IPoint {\n        const value = timer.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const snapshot = timer.getSnapshot();\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(timer);\n        const measurement = this.getMeasurementName(timer);\n\n        fields[`${fieldNamePrefix}count`] = timer.getCount() || 0;\n        fields[`${fieldNamePrefix}m15_rate`] = this.getNumber(timer.get15MinuteRate());\n        fields[`${fieldNamePrefix}m1_rate`] = this.getNumber(timer.get1MinuteRate());\n        fields[`${fieldNamePrefix}m5_rate`] = this.getNumber(timer.get5MinuteRate());\n        fields[`${fieldNamePrefix}max`] = this.getNumber(snapshot.getMax());\n        fields[`${fieldNamePrefix}mean`] = this.getNumber(snapshot.getMean());\n        fields[`${fieldNamePrefix}mean_rate`] = this.getNumber(timer.getMeanRate());\n        fields[`${fieldNamePrefix}min`] = this.getNumber(snapshot.getMin());\n        fields[`${fieldNamePrefix}p50`] = this.getNumber(snapshot.getMedian());\n        fields[`${fieldNamePrefix}p75`] = this.getNumber(snapshot.get75thPercentile());\n        fields[`${fieldNamePrefix}p95`] = this.getNumber(snapshot.get95thPercentile());\n        fields[`${fieldNamePrefix}p98`] = this.getNumber(snapshot.get98thPercentile());\n        fields[`${fieldNamePrefix}p99`] = this.getNumber(snapshot.get99thPercentile());\n        fields[`${fieldNamePrefix}p999`] = this.getNumber(snapshot.get999thPercentile());\n        fields[`${fieldNamePrefix}stddev`] = this.getNumber(snapshot.getStdDev());\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(timer),\n            timestamp: date,\n        };\n    }\n\n    /**\n     * Builds the prefix for a field name.\n     *\n     * @private\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof InfluxMetricReporter\n     */\n    private getFieldNamePrefix(metric: Metric): string {\n        if (metric.getGroup()) {\n            return `${metric.getName()}.`;\n        }\n        return \"\";\n    }\n\n    /**\n     * Builds the prefix for the metric name.\n     *\n     * @private\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof InfluxMetricReporter\n     */\n    private getMeasurementName(metric: Metric): string {\n        if (metric.getGroup()) {\n            return metric.getGroup();\n        }\n        return metric.getName();\n    }\n\n    /**\n     * Builds the tags using the metric's tags and this reportes tags.\n     *\n     * @private\n     * @param {Taggable} taggable\n     * @returns {{ [key: string]: string }}\n     * @memberof InfluxMetricReporter\n     */\n    private buildTags(taggable: Taggable): { [key: string]: string } {\n        const tags: { [x: string]: string } = {};\n        this.tags.forEach((tag, key) => tags[key] = tag);\n        taggable.getTags().forEach((tag, key) => tags[key] = tag);\n        return tags;\n    }\n\n    /**\n     * Uses the sender to report the given data points.\n     *\n     * @private\n     * @param {IPoint[]} points\n     * @param {MetricType} type\n     * @memberof InfluxMetricReporter\n     */\n    private sendPoints(points: IPoint[], type: MetricType) {\n        this.queue.push(async (callback: () => void) => {\n            try {\n                await this.sender.send(points);\n                if (this.log) {\n                    this.log.debug(`wrote ${type} metrics`, this.logMetadata);\n                }\n            } catch (reason) {\n                if (this.log) {\n                    this.log.error(`error writing ${type} metrics - reason: ${reason}`, reason, this.logMetadata);\n                }\n            } finally {\n                callback();\n            }\n        });\n    }\n\n    /**\n     * Either gets 0 or the specifed value.\n     *\n     * @private\n     * @param {number} value\n     * @returns {number}\n     * @memberof InfluxMetricReporter\n     */\n    private getNumber(value: number): number {\n        if (isNaN(value)) {\n            return 0;\n        }\n        return value;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Sender.html":{"url":"interfaces/Sender.html","title":"interface - Sender","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Sender\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/InfluxMetricReporter.ts\n        \n\n            \n                Description\n            \n            \n                Sender interface for influxdb client abstraction.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    init\n                                \n                                \n                                    isReady\n                                \n                                \n                                    send\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            init\n                            \n                            \n                        \n                    \n                \n                \n                    \ninit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/InfluxMetricReporter.ts:51\n                            \n                        \n\n\n                \n                    \n                            Triggers the initialization process.\n\n\n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isReady\n                            \n                            \n                        \n                    \n                \n                \n                    \nisReady()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/InfluxMetricReporter.ts:43\n                            \n                        \n\n\n                \n                    \n                            Indicates if the sender is ready to send data.\n\n\n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            send\n                            \n                            \n                        \n                    \n                \n                \n                    \nsend(points: IPoint[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/InfluxMetricReporter.ts:60\n                            \n                        \n\n\n                \n                    \n                            Sends the given data points to influxdb.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        points\n                                                        \n                                                                    IPoint[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport * as async from \"async\";\nimport { IPoint } from \"influx\";\nimport {\n    Clock,\n    Counter,\n    Gauge,\n    Histogram,\n    Logger,\n    Meter,\n    Metric,\n    MetricRegistry,\n    MetricReporter,\n    MILLISECOND,\n    MINUTE,\n    MonotoneCounter,\n    StdClock,\n    Taggable,\n    Timer,\n    TimeUnit,\n} from \"inspector-metrics\";\n\n/**\n * Enumeration of all metric types.\n */\nexport type MetricType = \"counter\" | \"gauge\" | \"histogram\" | \"meter\" | \"timer\";\n\n/**\n * Sender interface for influxdb client abstraction.\n *\n * @export\n * @interface Sender\n */\nexport interface Sender {\n\n    /**\n     * Indicates if the sender is ready to send data.\n     *\n     * @returns {Promise}\n     * @memberof Sender\n     */\n    isReady(): Promise;\n\n    /**\n     * Triggers the initialization process.\n     *\n     * @returns {Promise}\n     * @memberof Sender\n     */\n    init(): Promise;\n\n    /**\n     * Sends the given data points to influxdb.\n     *\n     * @param {IPoint[]} points\n     * @returns {Promise}\n     * @memberof Sender\n     */\n    send(points: IPoint[]): Promise;\n\n}\n\n/**\n * Entry interface to track the last value and timestamp of a metric instance.\n *\n * @interface MetricEntry\n */\ninterface MetricEntry {\n    /**\n     * Timestamp of the last reporting.\n     *\n     * @type {number}\n     * @memberof MetricEntry\n     */\n    lastReport: number;\n\n    /**\n     * Last reported reference value.\n     *\n     * @type {number}\n     * @memberof MetricEntry\n     */\n    lastValue: number;\n}\n\n/**\n * InfluxDB reporter implementation.\n *\n * @export\n * @class InfluxMetricReporter\n * @extends {MetricReporter}\n */\nexport class InfluxMetricReporter extends MetricReporter {\n\n    /**\n     * Clock used to determine the current timestamp.\n     *\n     * @private\n     * @type {Clock}\n     * @memberof InfluxMetricReporter\n     */\n    private clock: Clock;\n    /**\n     * Reference for the object returned by the scheduler function.\n     *\n     * @private\n     * @type {NodeJS.Timer}\n     * @memberof InfluxMetricReporter\n     */\n    private timer: NodeJS.Timer;\n    /**\n     * Reporting interval.\n     *\n     * @private\n     * @type {number}\n     * @memberof InfluxMetricReporter\n     */\n    private interval: number;\n    /**\n     * Minimal timeout to include a metric instance into a reporting.\n     *\n     * @private\n     * @type {number}\n     * @memberof InfluxMetricReporter\n     */\n    private minReportingTimeout: number;\n    /**\n     * Time unit for the reporting interval.\n     *\n     * @private\n     * @type {TimeUnit}\n     * @memberof InfluxMetricReporter\n     */\n    private unit: TimeUnit;\n    /**\n     * Tags assigned to this reporter instance - reported for every metric instance.\n     *\n     * @private\n     * @type {Map}\n     * @memberof InfluxMetricReporter\n     */\n    private tags: Map;\n    /**\n     * Metadata for the logger.\n     *\n     * @private\n     * @type {*}\n     * @memberof InfluxMetricReporter\n     */\n    private logMetadata: any;\n    /**\n     * async queue used to queue data point sending.\n     *\n     * @private\n     * @type {async.AsyncQueue}\n     * @memberof InfluxMetricReporter\n     */\n    private queue: async.AsyncQueue;\n    /**\n     * Minimal logger interface to report failures.\n     *\n     * @private\n     * @type {Logger}\n     * @memberof InfluxMetricReporter\n     */\n    private log: Logger = console;\n    /**\n     * Sender instance used to report metrics.\n     *\n     * @private\n     * @type {Sender}\n     * @memberof InfluxMetricReporter\n     */\n    private sender: Sender;\n    /**\n     * Saves the state of each reported metrics.\n     *\n     * @private\n     * @type {Map}\n     * @memberof InfluxMetricReporter\n     */\n    private metricStates: Map = new Map();\n\n    /**\n     * Creates an instance of InfluxMetricReporter.\n     *\n     * @param {Sender} sender The influx sender instance.\n     * @param {number} [interval=1000] The reporting interval.\n     * @param {TimeUnit} [unit=MILLISECOND] The time unit for the reporting interval.\n     * @param {Map} [tags=new Map()] Tags assigned to every metric.\n     * @param {Clock} [clock=new StdClock()] The clock - used to determine the timestamp of the metrics while reporting.\n     * @param {number} [minReportingTimeout=1] The time in minutes the report sends even unchanged metrics.\n     * @memberof InfluxMetricReporter\n     */\n    public constructor(\n        sender: Sender,\n        interval: number = 1000,\n        unit: TimeUnit = MILLISECOND,\n        tags: Map = new Map(),\n        clock: Clock = new StdClock(),\n        minReportingTimeout = 1) {\n        super();\n\n        this.sender = sender;\n        this.interval = interval;\n        this.unit = unit;\n        this.tags = tags;\n        this.clock = clock;\n        this.minReportingTimeout = MINUTE.convertTo(minReportingTimeout, MILLISECOND);\n\n        this.logMetadata = {\n            interval,\n            tags,\n            unit,\n        };\n\n        this.queue = async.queue((task: (clb: () => void) => void, callback: () => void) => {\n            task(callback);\n        }, 1);\n\n        let unlock: () => void = null;\n        this.queue.push((callback: () => void) => {\n            unlock = callback;\n        });\n\n        this.sender.init()\n            .then(() => unlock());\n    }\n\n    /**\n     * Gets the reporter tags.\n     *\n     * @returns {Map}\n     * @memberof InfluxMetricReporter\n     */\n    public getTags(): Map {\n        return this.tags;\n    }\n\n    /**\n     * Sets the reporter tags.\n     *\n     * @param {Map} tags\n     * @memberof InfluxMetricReporter\n     */\n    public setTags(tags: Map): void {\n        this.tags = tags;\n    }\n\n    /**\n     * Gets the logger instance.\n     *\n     * @returns {Logger}\n     * @memberof InfluxMetricReporter\n     */\n    public getLog(): Logger {\n        return this.log;\n    }\n\n    /**\n     * Sets the logger instance.\n     *\n     * @param {Logger} log\n     * @memberof InfluxMetricReporter\n     */\n    public setLog(log: Logger): void {\n        this.log = log;\n    }\n\n    /**\n     * Uses the scheduler function to trigger periodical reporting.\n     *\n     * @memberof InfluxMetricReporter\n     */\n    public start(): void {\n        const interval: number = this.unit.convertTo(this.interval, MILLISECOND);\n        this.timer = setInterval(() => this.report(), interval);\n    }\n\n    /**\n     * Stops the timer reference returned by the scheduler function.\n     *\n     * @memberof InfluxMetricReporter\n     */\n    public stop(): void {\n        if (this.timer) {\n            this.timer.unref();\n        }\n    }\n\n    /**\n     * Reports the data points for each registered {@link MetricRegistry}.\n     *\n     * @private\n     * @memberof InfluxMetricReporter\n     */\n    private async report() {\n        const senderReady = await this.sender.isReady();\n        if (senderReady && this.metricRegistries && this.metricRegistries.length > 0) {\n            this.metricRegistries.forEach((registry) => this.reportMetricRegistry(registry));\n        }\n    }\n\n    /**\n     * Reports the data points for the specified {@link MetricRegistry}.\n     *\n     * @private\n     * @param {MetricRegistry} registry\n     * @memberof InfluxMetricReporter\n     */\n    private reportMetricRegistry(registry: MetricRegistry): void {\n        const now: Date = new Date(this.clock.time().milliseconds);\n\n        this.reportMetrics(registry.getMonotoneCounterList(), now, \"counter\",\n            (counter: MonotoneCounter, date: Date) => this.reportMonotoneCounter(counter, date),\n            (counter: MonotoneCounter) => counter.getCount());\n        this.reportMetrics(registry.getCounterList(), now, \"counter\",\n            (counter: Counter, date: Date) => this.reportCounter(counter, date),\n            (counter: Counter) => counter.getCount());\n        this.reportMetrics(registry.getGaugeList(), now, \"gauge\",\n            (gauge: Gauge, date: Date) => this.reportGauge(gauge, date),\n            (gauge: Gauge) => gauge.getValue());\n        this.reportMetrics(registry.getHistogramList(), now, \"histogram\",\n            (histogram: Histogram, date: Date) => this.reportHistogram(histogram, date),\n            (histogram: Histogram) => histogram.getCount());\n        this.reportMetrics(registry.getMeterList(), now, \"meter\",\n            (meter: Meter, date: Date) => this.reportMeter(meter, date),\n            (meter: Meter) => meter.getCount());\n        this.reportMetrics(registry.getTimerList(), now, \"timer\",\n            (timer: Timer, date: Date) => this.reportTimer(timer, date),\n            (timer: Timer) => timer.getCount());\n    }\n\n    /**\n     * Reports a collection of metric instance for a certain type.\n     *\n     * @private\n     * @template T\n     * @param {T[]} metrics\n     * @param {Date} date\n     * @param {MetricType} type the type to report.\n     * @param {(metric: Metric, date: Date) => IPoint} reportFunction\n     *      The function to build the data points for a certain metric.\n     * @param {(metric: Metric) => number} lastModifiedFunction\n     *      function to determine if a metric has a different value since the last reporting.\n     * @memberof InfluxMetricReporter\n     */\n    private reportMetrics(\n        metrics: T[],\n        date: Date,\n        type: MetricType,\n        reportFunction: (metric: Metric, date: Date) => IPoint,\n        lastModifiedFunction: (metric: Metric) => number): void {\n\n        const points: IPoint[] = [];\n        metrics.forEach((metric) => {\n            const metricId = (metric as any).id;\n            let changed = true;\n            if (metricId) {\n                changed = this.hasChanged(metricId, lastModifiedFunction(metric), date);\n            }\n\n            if (changed) {\n                const point = reportFunction(metric, date);\n                if (!!point) {\n                    points.push(point);\n                }\n            }\n        });\n        if (points.length > 0) {\n            this.sendPoints(points, type);\n        }\n    }\n\n    /**\n     * Determines if the specified metric has changed. This is always true if\n     * the minimum-reporting timeout was reached.\n     *\n     * @private\n     * @param {number} metricId\n     * @param {number} lastValue\n     * @param {Date} date\n     * @returns {boolean}\n     * @memberof InfluxMetricReporter\n     */\n    private hasChanged(metricId: number, lastValue: number, date: Date): boolean {\n        let changed = true;\n        let metricEntry = {\n            lastReport: 0,\n            lastValue,\n        };\n        if (this.metricStates.has(metricId)) {\n            metricEntry = this.metricStates.get(metricId);\n            changed = metricEntry.lastValue !== lastValue;\n            if (!changed) {\n                changed = metricEntry.lastReport + this.minReportingTimeout } gauge\n     * @param {Date} date\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    private reportGauge(gauge: Gauge, date: Date): IPoint {\n        const value = gauge.getValue();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(gauge);\n        const measurement = this.getMeasurementName(gauge);\n\n        fields[`${fieldNamePrefix}value`] = gauge.getValue() || 0;\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(gauge),\n            timestamp: date,\n        };\n    }\n\n    /**\n     * Computes and reports the fields of the histogram.\n     *\n     * @private\n     * @param {Histogram} histogram\n     * @param {Date} date\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    private reportHistogram(histogram: Histogram, date: Date): IPoint {\n        const value = histogram.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const snapshot = histogram.getSnapshot();\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(histogram);\n        const measurement = this.getMeasurementName(histogram);\n\n        fields[`${fieldNamePrefix}count`] = histogram.getCount() || 0;\n        fields[`${fieldNamePrefix}max`] = this.getNumber(snapshot.getMax());\n        fields[`${fieldNamePrefix}mean`] = this.getNumber(snapshot.getMean());\n        fields[`${fieldNamePrefix}min`] = this.getNumber(snapshot.getMin());\n        fields[`${fieldNamePrefix}p50`] = this.getNumber(snapshot.getMedian());\n        fields[`${fieldNamePrefix}p75`] = this.getNumber(snapshot.get75thPercentile());\n        fields[`${fieldNamePrefix}p95`] = this.getNumber(snapshot.get95thPercentile());\n        fields[`${fieldNamePrefix}p98`] = this.getNumber(snapshot.get98thPercentile());\n        fields[`${fieldNamePrefix}p99`] = this.getNumber(snapshot.get99thPercentile());\n        fields[`${fieldNamePrefix}p999`] = this.getNumber(snapshot.get999thPercentile());\n        fields[`${fieldNamePrefix}stddev`] = this.getNumber(snapshot.getStdDev());\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(histogram),\n            timestamp: date,\n        };\n    }\n\n    /**\n     * Computes and reports the fields of the meter.\n     *\n     * @private\n     * @param {Meter} meter\n     * @param {Date} date\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    private reportMeter(meter: Meter, date: Date): IPoint {\n        const value = meter.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(meter);\n        const measurement = this.getMeasurementName(meter);\n\n        fields[`${fieldNamePrefix}count`] = meter.getCount() || 0;\n        fields[`${fieldNamePrefix}m15_rate`] = this.getNumber(meter.get15MinuteRate());\n        fields[`${fieldNamePrefix}m1_rate`] = this.getNumber(meter.get1MinuteRate());\n        fields[`${fieldNamePrefix}m5_rate`] = this.getNumber(meter.get5MinuteRate());\n        fields[`${fieldNamePrefix}mean_rate`] = this.getNumber(meter.getMeanRate());\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(meter),\n            timestamp: date,\n        };\n    }\n\n    /**\n     * Computes and reports the fields of the timer.\n     *\n     * @private\n     * @param {Timer} timer\n     * @param {Date} date\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    private reportTimer(timer: Timer, date: Date): IPoint {\n        const value = timer.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const snapshot = timer.getSnapshot();\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(timer);\n        const measurement = this.getMeasurementName(timer);\n\n        fields[`${fieldNamePrefix}count`] = timer.getCount() || 0;\n        fields[`${fieldNamePrefix}m15_rate`] = this.getNumber(timer.get15MinuteRate());\n        fields[`${fieldNamePrefix}m1_rate`] = this.getNumber(timer.get1MinuteRate());\n        fields[`${fieldNamePrefix}m5_rate`] = this.getNumber(timer.get5MinuteRate());\n        fields[`${fieldNamePrefix}max`] = this.getNumber(snapshot.getMax());\n        fields[`${fieldNamePrefix}mean`] = this.getNumber(snapshot.getMean());\n        fields[`${fieldNamePrefix}mean_rate`] = this.getNumber(timer.getMeanRate());\n        fields[`${fieldNamePrefix}min`] = this.getNumber(snapshot.getMin());\n        fields[`${fieldNamePrefix}p50`] = this.getNumber(snapshot.getMedian());\n        fields[`${fieldNamePrefix}p75`] = this.getNumber(snapshot.get75thPercentile());\n        fields[`${fieldNamePrefix}p95`] = this.getNumber(snapshot.get95thPercentile());\n        fields[`${fieldNamePrefix}p98`] = this.getNumber(snapshot.get98thPercentile());\n        fields[`${fieldNamePrefix}p99`] = this.getNumber(snapshot.get99thPercentile());\n        fields[`${fieldNamePrefix}p999`] = this.getNumber(snapshot.get999thPercentile());\n        fields[`${fieldNamePrefix}stddev`] = this.getNumber(snapshot.getStdDev());\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(timer),\n            timestamp: date,\n        };\n    }\n\n    /**\n     * Builds the prefix for a field name.\n     *\n     * @private\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof InfluxMetricReporter\n     */\n    private getFieldNamePrefix(metric: Metric): string {\n        if (metric.getGroup()) {\n            return `${metric.getName()}.`;\n        }\n        return \"\";\n    }\n\n    /**\n     * Builds the prefix for the metric name.\n     *\n     * @private\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof InfluxMetricReporter\n     */\n    private getMeasurementName(metric: Metric): string {\n        if (metric.getGroup()) {\n            return metric.getGroup();\n        }\n        return metric.getName();\n    }\n\n    /**\n     * Builds the tags using the metric's tags and this reportes tags.\n     *\n     * @private\n     * @param {Taggable} taggable\n     * @returns {{ [key: string]: string }}\n     * @memberof InfluxMetricReporter\n     */\n    private buildTags(taggable: Taggable): { [key: string]: string } {\n        const tags: { [x: string]: string } = {};\n        this.tags.forEach((tag, key) => tags[key] = tag);\n        taggable.getTags().forEach((tag, key) => tags[key] = tag);\n        return tags;\n    }\n\n    /**\n     * Uses the sender to report the given data points.\n     *\n     * @private\n     * @param {IPoint[]} points\n     * @param {MetricType} type\n     * @memberof InfluxMetricReporter\n     */\n    private sendPoints(points: IPoint[], type: MetricType) {\n        this.queue.push(async (callback: () => void) => {\n            try {\n                await this.sender.send(points);\n                if (this.log) {\n                    this.log.debug(`wrote ${type} metrics`, this.logMetadata);\n                }\n            } catch (reason) {\n                if (this.log) {\n                    this.log.error(`error writing ${type} metrics - reason: ${reason}`, reason, this.logMetadata);\n                }\n            } finally {\n                callback();\n            }\n        });\n    }\n\n    /**\n     * Either gets 0 or the specifed value.\n     *\n     * @private\n     * @param {number} value\n     * @returns {number}\n     * @memberof InfluxMetricReporter\n     */\n    private getNumber(value: number): number {\n        if (isNaN(value)) {\n            return 0;\n        }\n        return value;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                lib/metrics/DefaultSender.ts\n            \n            \n                class\n            \n            \n                DefaultSender\n            \n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                lib/metrics/InfluxMetricReporter.ts\n            \n            \n                class\n            \n            \n                InfluxMetricReporter\n            \n            \n                100 %\n                (34/34)\n            \n        \n        \n            \n                \n                lib/metrics/InfluxMetricReporter.ts\n            \n            \n                interface\n            \n            \n                MetricEntry\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/metrics/InfluxMetricReporter.ts\n            \n            \n                interface\n            \n            \n                Sender\n            \n            \n                100 %\n                (4/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            async : ^2.6.1\n        \n            influx : ^5.0.7\n        \n            inspector-metrics : ^1.11.0\n        \n            source-map-support : ^0.5.9\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\ninspector-influx\nTypescript Metrics Reporter for\nInfluxDB.\n\n    \n        \n    \n    \n        \n    \n    \n        \n    \n    \n        \n    \n\n\nThis library is made for inspector-metrics node module and\nis meant to be used with typescript / nodejs.It uses node-influx as influxdb client.\ninstall\nnpm install --save inspector-influx\nbasic usage\nimport { InfluxMetricReporter } from \"inspector-influx\";\nimport { MetricRegistry, Timer } from \"inspector-metrics\";\n\n// influxdb config from https://github.com/node-influx/node-influx/blob/master/src/index.ts#L80\nconst dbConfig = {\n    \"username\": \"admin\",\n    \"password\": \"admin\",\n    \"database\": \"example-db\",\n    \"hosts\": [\n        { \"host\": \"influx\", \"port\": 8086 }\n    ]\n};\n\nconst reporter: InfluxMetricReporter = new InfluxMetricReporter(dbConfig);\nconst registry: MetricRegistry = new MetricRegistry();\nconst requests: Timer = registry.newTimer(\"requests\");\n\nreporter.setLog(global.console);\nreporter.addMetricRegistry(registry);\n\nreporter.start();\n\n// example usage\nsetInterval(() => {\n    // should report a few milliseconds\n    requests.time(() => {\n        let a = 0;\n        let b = 1;\n        for (let i = 0; i License\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2017 \nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            MetricType   (lib/.../InfluxMetricReporter.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/metrics/InfluxMetricReporter.ts\n    \n        \n            \n                \n                    \n                        \n                        MetricType\n                    \n                \n                    \n                        \n                            Enumeration of all metric types.\n\n                        \n                    \n                \n                    \n                        MetricType:     \"counter\" | \"gauge\" | \"histogram\" | \"meter\" | \"timer\"\n\n                    \n                \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"unit-test.html":{"url":"unit-test.html","title":"unit-test - unit-test","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Unit test coverage\n\n\n\n    \n    \n    \n    \n\n\n\n    \n        \n            File\n            Statements\n            Branches\n            Functions\n            Lines\n        \n    \n    \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
