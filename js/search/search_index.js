var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.2","fields":["title","body"],"fieldVectors":[["title/classes/DefaultSender.html",[0,0.672,1,1.351]],["body/classes/DefaultSender.html",[0,0.972,1,2.471,2,1.253,3,0.998,4,0.624,5,1.595,6,1.253,7,3.297,8,2.199,9,1.911,10,1.498,11,1.595,12,1.085,13,2.182,14,2.471,15,2.959,16,2.891,17,2.367,18,2.182,19,2.452,20,1.911,21,2.1,22,2.1,23,2.271,24,1.253,25,2.893,26,4.051,27,2.959,28,2.893,29,1.714,30,2.1,31,2.182,32,0.092,33,1.953,34,1.498,35,2.182,36,2.115,37,1.237,38,1.672,39,2.893,40,1.714,41,2.115,42,2.1,43,1.253,44,2.893,45,1.714,46,1.364,47,0.853,48,2.115,49,2.893,50,2.487,51,2.893,52,2.893,53,2.1,54,2.199,55,2.115,56,1.085,57,1.714,58,1.953,59,1.714,60,2.199,61,2.115,62,1.714,63,2.1,64,1.364,65,0.793,66,1.714,67,2.324,68,1.714,69,2.115,70,2.115,71,0.624,72,2.115,73,1.364,74,2.115,75,1.953,76,2.115,77,2.115,78,1.714,79,1.253,80,2.115,81,2.115,82,0.998,83,2.115,84,2.893,85,1.253,86,2.115,87,0.059,88,0.059]],["title/interfaces/MetricEntry.html",[89,0.672,90,1.075]],["body/interfaces/MetricEntry.html",[0,0.423,2,0.504,3,0.676,4,0.251,6,0.504,8,0.504,9,0.877,10,1.38,12,0.319,13,1.081,14,2.48,17,0.504,19,1.667,20,1.03,21,0.504,22,0.504,23,1.294,24,0.504,29,0.504,30,1.938,32,0.093,33,0.849,34,1.469,37,0.538,38,0.401,40,0.504,42,0.849,43,2.128,45,0.504,46,1.898,47,1.202,53,1.667,54,2.393,56,0.698,57,0.504,58,1.567,59,0.504,60,2.128,62,0.849,63,1.938,64,1.03,65,1.52,66,1.445,67,2.417,68,2.375,71,0.644,73,1.836,75,0.849,78,1.885,79,2.32,82,1.451,85,1.102,87,0.029,88,0.029,89,0.907,90,1.327,91,0.401,92,1.081,93,1.081,94,2.122,95,2.399,96,1.839,97,2.23,98,1.647,99,2.065,100,0.641,101,2.399,102,1.667,103,1.823,104,1.938,105,2.468,106,1.938,107,1.445,108,1.402,109,1.294,110,1.081,111,1.402,112,1.647,113,1.614,114,1.839,115,0.401,116,0.504,117,1.445,118,0.641,119,1.081,120,0.641,121,0.641,122,1.081,123,1.081,124,1.327,125,1.647,126,0.641,127,1.402,128,1.445,129,1.081,130,2.399,131,1.081,132,1.081,133,0.504,134,1.081,135,1.402,136,1.247,137,2.855,138,1.081,139,0.641,140,0.641,141,1.402,142,1.081,143,0.641,144,1.402,145,0.641,146,0.504,147,1.081,148,0.641,149,0.641,150,0.641,151,0.641,152,0.641,153,0.641,154,0.641,155,0.641,156,0.641,157,0.849,158,0.641,159,0.641,160,0.641,161,0.641,162,1.402,163,0.641,164,1.081,165,0.641,166,1.402,167,0.641,168,0.641,169,0.641,170,2.528,171,1.647,172,0.641,173,1.402,174,1.839,175,0.641,176,0.641,177,0.641,178,1.081,179,0.641,180,0.641,181,1.647,182,0.641,183,0.641,184,0.401,185,0.641,186,1.081,187,0.504,188,0.641,189,1.081,190,0.641,191,0.641,192,1.081,193,1.081,194,0.641,195,0.641,196,0.641,197,0.641,198,0.641,199,0.504,200,0.641,201,1.994,202,3.173,203,0.641,204,0.641,205,0.641,206,0.641,207,0.641,208,0.641,209,1.402,210,0.641,211,0.641,212,1.402,213,0.641,214,0.641,215,1.402,216,0.641,217,0.641,218,1.402,219,0.641,220,1.081,221,0.641,222,1.402,223,1.081,224,1.647,225,1.081,226,0.641,227,0.641,228,0.641,229,1.402,230,0.641,231,2.23,232,0.641,233,0.641,234,0.641,235,0.641,236,0.641,237,0.641,238,0.641,239,0.641,240,0.641,241,0.641,242,0.641,243,0.641,244,0.641,245,0.641,246,0.641,247,1.839,248,2.528,249,1.647,250,0.641,251,2.23,252,0.641,253,0.641,254,0.641,255,1.402,256,0.641,257,1.081,258,0.641,259,0.641,260,0.641,261,1.402,262,1.081,263,1.081,264,1.081,265,1.081,266,1.081,267,1.081,268,1.081,269,1.081,270,1.081,271,1.081,272,1.081,273,1.081,274,1.081,275,1.081,276,1.081,277,1.081,278,1.081,279,1.081,280,1.081,281,1.081,282,0.641,283,0.641,284,0.641,285,0.641,286,1.081,287,0.641,288,1.081,289,0.641,290,1.081,291,0.641,292,1.081,293,0.641,294,0.641,295,0.641,296,0.641,297,0.641,298,0.641,299,0.641,300,0.641,301,0.641,302,0.641,303,0.641,304,1.081,305,0.641,306,1.402,307,1.081,308,0.641,309,0.641,310,1.647,311,0.641,312,0.641,313,0.641,314,1.081,315,0.641,316,0.641,317,0.641,318,0.641,319,0.641,320,0.641,321,0.641,322,1.647,323,0.641,324,0.641,325,0.641,326,0.641,327,0.641]],["title/interfaces/Sender.html",[10,0.855,89,0.672]],["body/interfaces/Sender.html",[0,0.419,2,0.499,3,0.671,4,0.248,6,0.499,8,0.499,9,1.144,10,1.417,12,0.316,14,2.477,17,0.843,18,1.073,19,1.66,20,1.024,21,1.286,22,1.286,23,1.744,24,0.499,27,1.393,29,0.499,30,1.878,31,0.635,32,0.093,33,1.094,34,1.458,35,0.635,37,0.534,38,0.671,40,0.499,42,0.843,43,2.059,45,0.843,46,1.88,47,1.197,53,1.816,54,2.414,56,0.693,57,0.499,58,1.816,59,0.843,60,2.175,62,0.843,63,2.021,64,1.024,65,1.518,66,1.437,67,2.414,68,2.372,71,0.64,73,1.833,75,0.843,78,1.878,79,2.256,82,1.446,85,1.094,87,0.029,88,0.029,89,0.904,90,1.241,91,0.397,92,0.635,93,0.635,94,1.637,95,2.22,96,1.073,97,1.829,98,1.393,99,2.059,100,0.635,101,2.391,102,1.66,103,1.816,104,1.932,105,2.46,106,1.932,107,1.437,108,1.393,109,1.286,110,1.073,111,1.393,112,1.637,113,1.609,114,1.829,115,0.397,116,0.499,117,1.437,118,1.073,119,1.393,120,1.073,121,1.073,122,1.393,123,1.073,124,1.321,125,1.637,126,0.635,127,1.393,128,1.437,129,1.073,130,2.391,131,1.073,132,1.073,133,0.499,134,1.073,135,1.393,136,1.241,137,2.849,138,1.073,139,0.635,140,0.635,141,1.393,142,1.073,143,0.635,144,1.393,145,0.635,146,0.499,147,1.073,148,0.635,149,0.635,150,0.635,151,0.635,152,0.635,153,0.635,154,0.635,155,0.635,156,0.635,157,0.843,158,0.635,159,0.635,160,0.635,161,0.635,162,1.393,163,0.635,164,1.073,165,0.635,166,1.393,167,0.635,168,0.635,169,0.635,170,2.52,171,1.637,172,0.635,173,1.393,174,1.829,175,0.635,176,0.635,177,0.635,178,1.073,179,0.635,180,0.635,181,1.637,182,0.635,183,0.635,184,0.397,185,0.635,186,1.073,187,0.499,188,0.635,189,1.073,190,0.635,191,0.635,192,1.073,193,1.073,194,0.635,195,0.635,196,0.635,197,0.635,198,0.635,199,0.499,200,0.635,201,1.985,202,3.17,203,0.635,204,0.635,205,0.635,206,0.635,207,0.635,208,0.635,209,1.393,210,0.635,211,0.635,212,1.393,213,0.635,214,0.635,215,1.393,216,0.635,217,0.635,218,1.393,219,0.635,220,1.073,221,0.635,222,1.393,223,1.073,224,1.637,225,1.073,226,0.635,227,0.635,228,0.635,229,1.393,230,0.635,231,2.22,232,0.635,233,0.635,234,0.635,235,0.635,236,0.635,237,0.635,238,0.635,239,0.635,240,0.635,241,0.635,242,0.635,243,0.635,244,0.635,245,0.635,246,0.635,247,1.829,248,2.52,249,1.637,250,0.635,251,2.22,252,0.635,253,0.635,254,0.635,255,1.393,256,0.635,257,1.073,258,0.635,259,0.635,260,0.635,261,1.393,262,1.073,263,1.073,264,1.073,265,1.073,266,1.073,267,1.073,268,1.073,269,1.073,270,1.073,271,1.073,272,1.073,273,1.073,274,1.073,275,1.073,276,1.073,277,1.073,278,1.073,279,1.073,280,1.073,281,1.073,282,0.635,283,0.635,284,0.635,285,0.635,286,1.073,287,0.635,288,1.073,289,0.635,290,1.073,291,0.635,292,1.073,293,0.635,294,0.635,295,0.635,296,0.635,297,0.635,298,0.635,299,0.635,300,0.635,301,0.635,302,0.635,303,0.635,304,1.073,305,0.635,306,1.393,307,1.073,308,0.635,309,0.635,310,1.637,311,0.635,312,0.635,313,0.635,314,1.073,315,0.635,316,0.635,317,0.635,318,0.635,319,0.635,320,0.635,321,0.635,322,1.637,323,0.635,324,0.635,325,0.635,326,0.635,327,0.635,328,0.842,329,0.842,330,0.842]],["title/coverage.html",[331,1.803]],["body/coverage.html",[0,1.126,1,1.943,4,0.967,5,2.474,10,1.231,32,0.088,34,1.231,65,1.231,71,0.967,87,0.078,88,0.078,89,1.126,90,1.547,91,1.907,331,1.943,332,2.474,333,3.28,334,2.474,335,4.164,336,3.28,337,3.28,338,3.28,339,3.28,340,2.474,341,2.474]],["title/dependencies.html",[342,1.938,343,2.054]],["body/dependencies.html",[3,1.594,20,1.594,32,0.088,37,1.268,47,0.997,87,0.08,88,0.08,99,2.003,115,1.594,343,2.55,344,3.38,345,3.38,346,3.38,347,3.38,348,3.38]],["title/index.html",[12,0.727,56,0.727,184,0.914]],["body/index.html",[9,1.805,11,2.668,15,2.175,16,2.175,32,0.092,37,1.536,38,1.36,46,1.805,47,1.128,50,2.175,64,1.668,65,1.327,71,1.043,73,1.882,82,1.668,87,0.072,88,0.072,107,2.267,109,1.708,113,1.668,115,1.931,124,1.668,146,1.708,157,1.708,187,1.708,199,1.708,349,3.537,350,2.883,351,2.883,352,3.537,353,1.708,354,2.883,355,2.883,356,3.537,357,2.883,358,2.883,359,3.537,360,2.883,361,2.883,362,2.883,363,2.883,364,2.883,365,3.537,366,2.883,367,3.537,368,2.883,369,2.883,370,2.883,371,2.883,372,2.883,373,2.883,374,2.883,375,2.883,376,2.883,377,2.883,378,2.883,379,1.708,380,2.175]],["title/license.html",[56,0.727,184,0.914,379,1.148]],["body/license.html",[4,0.878,32,0.074,87,0.074,88,0.074,124,1.702,133,2.3,332,2.247,379,1.765,380,2.247,381,3.881,382,2.979,383,2.979,384,3.608,385,2.979,386,2.979,387,2.979,388,2.979,389,3.608,390,2.979,391,4.034,392,4.318,393,2.979,394,3.608,395,3.881,396,2.979,397,3.608,398,2.979,399,2.979,400,2.979,401,2.979,402,2.979,403,2.979,404,2.979,405,2.979,406,2.979,407,2.979,408,2.979,409,2.979,410,2.979,411,2.979,412,3.608,413,3.608,414,2.979,415,2.979,416,2.979,417,3.608,418,2.979,419,2.979,420,2.979,421,2.979,422,2.979,423,2.979,424,2.979,425,2.979,426,2.979,427,2.979,428,2.979,429,2.979,430,2.979,431,2.979,432,2.979,433,2.979,434,2.979,435,2.979,436,2.979,437,2.979,438,2.979,439,2.979,440,2.979]],["title/modules.html",[353,1.803]],["body/modules.html",[32,0.081,87,0.081,88,0.081,353,2.058]],["title/overview.html",[441,2.295]],["body/overview.html",[0,1.017,32,0.08,87,0.08,88,0.08,89,1.017,441,2.601,442,3.932]],["title/miscellaneous/typealiases.html",[443,1.462,444,2.722]],["body/miscellaneous/typealiases.html",[12,1.257,32,0.088,34,1.451,47,0.988,87,0.079,88,0.079,91,1.58,102,1.985,103,1.985,104,1.985,106,1.985,113,1.58,116,1.985,117,2.416,443,2.527,445,3.35,446,3.35]],["title/unit-test.html",[136,1.162,447,1.858]],["body/unit-test.html",[4,1.006,32,0.08,71,1.006,87,0.08,88,0.08,128,2.021,136,1.609,331,2.021,334,2.573,340,2.573,341,2.573,447,2.573,448,3.411,449,3.411]]],"invertedIndex":[["",{"_index":32,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["0",{"_index":82,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["0.5.9",{"_index":348,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":157,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["1.11.0",{"_index":346,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":335,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":156,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["2",{"_index":442,"title":{},"body":{"overview.html":{}}}],["2.6.1",{"_index":344,"title":{},"body":{"dependencies.html":{}}}],["2017",{"_index":383,"title":{},"body":{"license.html":{}}}],["3/3",{"_index":338,"title":{},"body":{"coverage.html":{}}}],["33/33",{"_index":337,"title":{},"body":{"coverage.html":{}}}],["4/4",{"_index":339,"title":{},"body":{"coverage.html":{}}}],["5.0.7",{"_index":345,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":336,"title":{},"body":{"coverage.html":{}}}],["8086",{"_index":369,"title":{},"body":{"index.html":{}}}],["abov",{"_index":411,"title":{},"body":{"license.html":{}}}],["abstract",{"_index":118,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["action",{"_index":434,"title":{},"body":{"license.html":{}}}],["admin",{"_index":365,"title":{},"body":{"index.html":{}}}],["alias",{"_index":445,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alway",{"_index":238,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["and/or",{"_index":404,"title":{},"body":{"license.html":{}}}],["any).id",{"_index":230,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["aris",{"_index":438,"title":{},"body":{"license.html":{}}}],["arr",{"_index":80,"title":{},"body":{"classes/DefaultSender.html":{}}}],["assign",{"_index":138,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["associ",{"_index":393,"title":{},"body":{"license.html":{}}}],["async",{"_index":20,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"dependencies.html":{}}}],["async.asyncqueu",{"_index":142,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["async.queue((task",{"_index":168,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["author",{"_index":427,"title":{},"body":{"license.html":{}}}],["await",{"_index":75,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["b",{"_index":378,"title":{},"body":{"index.html":{}}}],["basic",{"_index":358,"title":{},"body":{"index.html":{}}}],["befor",{"_index":52,"title":{},"body":{"classes/DefaultSender.html":{}}}],["boolean",{"_index":42,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["branch",{"_index":448,"title":{},"body":{"unit-test.html":{}}}],["build",{"_index":224,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["buildtags(tagg",{"_index":311,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["c",{"_index":382,"title":{},"body":{"license.html":{}}}],["callback",{"_index":171,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["catch",{"_index":321,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["certain",{"_index":220,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["chang",{"_index":231,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["charg",{"_index":388,"title":{},"body":{"license.html":{}}}],["claim",{"_index":430,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/DefaultSender.html":{}},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"coverage.html":{},"overview.html":{}}}],["clb",{"_index":169,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["client",{"_index":38,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["clock",{"_index":101,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["clock=new",{"_index":152,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["collect",{"_index":219,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["comput",{"_index":255,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["condit",{"_index":410,"title":{},"body":{"license.html":{}}}],["config",{"_index":15,"title":{},"body":{"classes/DefaultSender.html":{},"index.html":{}}}],["configur",{"_index":39,"title":{},"body":{"classes/DefaultSender.html":{}}}],["connect",{"_index":440,"title":{},"body":{"license.html":{}}}],["consol",{"_index":145,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["const",{"_index":73,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["constructor",{"_index":24,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["constructor(config",{"_index":25,"title":{},"body":{"classes/DefaultSender.html":{}}}],["contract",{"_index":435,"title":{},"body":{"license.html":{}}}],["copi",{"_index":391,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":381,"title":{},"body":{"license.html":{}}}],["counter",{"_index":102,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"miscellaneous/typealiases.html":{}}}],["counter.getcount",{"_index":206,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["coverag",{"_index":331,"title":{"coverage.html":{}},"body":{"coverage.html":{},"unit-test.html":{}}}],["creat",{"_index":29,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["current",{"_index":126,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["damag",{"_index":431,"title":{},"body":{"license.html":{}}}],["data",{"_index":53,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["databas",{"_index":50,"title":{},"body":{"classes/DefaultSender.html":{},"index.html":{}}}],["date",{"_index":202,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["date(this.clock.time().millisecond",{"_index":203,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["db",{"_index":16,"title":{},"body":{"classes/DefaultSender.html":{},"index.html":{}}}],["dbconfig",{"_index":363,"title":{},"body":{"index.html":{}}}],["deal",{"_index":394,"title":{},"body":{"license.html":{}}}],["default",{"_index":7,"title":{},"body":{"classes/DefaultSender.html":{}}}],["defaultsend",{"_index":1,"title":{"classes/DefaultSender.html":{}},"body":{"classes/DefaultSender.html":{},"coverage.html":{}}}],["defin",{"_index":27,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/Sender.html":{}}}],["depend",{"_index":343,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["descript",{"_index":6,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["determin",{"_index":125,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["differ",{"_index":226,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["distribut",{"_index":402,"title":{},"body":{"license.html":{}}}],["document",{"_index":332,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["each",{"_index":147,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["ensur",{"_index":49,"title":{},"body":{"classes/DefaultSender.html":{}}}],["entri",{"_index":92,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["enumer",{"_index":116,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"miscellaneous/typealiases.html":{}}}],["even",{"_index":154,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["event",{"_index":426,"title":{},"body":{"license.html":{}}}],["exampl",{"_index":11,"title":{},"body":{"classes/DefaultSender.html":{},"index.html":{}}}],["exist",{"_index":51,"title":{},"body":{"classes/DefaultSender.html":{}}}],["export",{"_index":66,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["express",{"_index":419,"title":{},"body":{"license.html":{}}}],["extend",{"_index":123,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["failur",{"_index":143,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["fals",{"_index":44,"title":{},"body":{"classes/DefaultSender.html":{}}}],["few",{"_index":376,"title":{},"body":{"index.html":{}}}],["field",{"_index":248,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["fieldnameprefix",{"_index":249,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}count",{"_index":261,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}m15_r",{"_index":286,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}m1_r",{"_index":288,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}m5_r",{"_index":290,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}max",{"_index":262,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}mean",{"_index":264,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}mean_r",{"_index":292,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}min",{"_index":266,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}p50",{"_index":268,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}p75",{"_index":270,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}p95",{"_index":272,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}p98",{"_index":274,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}p99",{"_index":276,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}p999",{"_index":278,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}stddev",{"_index":280,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["fields[`${fieldnameprefix}valu",{"_index":253,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["file",{"_index":4,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"coverage.html":{},"license.html":{},"unit-test.html":{}}}],["final",{"_index":325,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["fit",{"_index":422,"title":{},"body":{"license.html":{}}}],["follow",{"_index":409,"title":{},"body":{"license.html":{}}}],["free",{"_index":387,"title":{},"body":{"license.html":{}}}],["function",{"_index":128,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"unit-test.html":{}}}],["furnish",{"_index":407,"title":{},"body":{"license.html":{}}}],["gaug",{"_index":103,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"miscellaneous/typealiases.html":{}}}],["gauge.getvalu",{"_index":209,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["get",{"_index":56,"title":{"index.html":{},"license.html":{}},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["getfieldnameprefix(metr",{"_index":305,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["getlog",{"_index":180,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["getmeasurementname(metr",{"_index":308,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["getnumber(valu",{"_index":327,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["gettag",{"_index":177,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["given",{"_index":122,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["grant",{"_index":386,"title":{},"body":{"license.html":{}}}],["haschanged(metricid",{"_index":241,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["herebi",{"_index":385,"title":{},"body":{"license.html":{}}}],["histogram",{"_index":104,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"miscellaneous/typealiases.html":{}}}],["histogram.getcount",{"_index":212,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["histogram.getsnapshot",{"_index":258,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["holder",{"_index":428,"title":{},"body":{"license.html":{}}}],["host",{"_index":367,"title":{},"body":{"index.html":{}}}],["https://github.com/nod",{"_index":360,"title":{},"body":{"index.html":{}}}],["iclusterconfig",{"_index":26,"title":{},"body":{"classes/DefaultSender.html":{}}}],["identifi",{"_index":333,"title":{},"body":{"coverage.html":{}}}],["implement",{"_index":8,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["impli",{"_index":420,"title":{},"body":{"license.html":{}}}],["import",{"_index":64,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["includ",{"_index":133,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"license.html":{}}}],["index",{"_index":12,"title":{"index.html":{}},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"miscellaneous/typealiases.html":{}}}],["indic",{"_index":45,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["influx",{"_index":37,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"dependencies.html":{},"index.html":{}}}],["influx/blob/master/src/index.ts#l80",{"_index":362,"title":{},"body":{"index.html":{}}}],["influx/nod",{"_index":361,"title":{},"body":{"index.html":{}}}],["influxdb",{"_index":9,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["influxdb(config",{"_index":72,"title":{},"body":{"classes/DefaultSender.html":{}}}],["influxmetricreport",{"_index":65,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"coverage.html":{},"index.html":{}}}],["influxmetricreporter(dbconfig",{"_index":370,"title":{},"body":{"index.html":{}}}],["info",{"_index":2,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["init",{"_index":21,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["initi",{"_index":120,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["inspector",{"_index":115,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"dependencies.html":{},"index.html":{}}}],["instal",{"_index":356,"title":{},"body":{"index.html":{}}}],["instanc",{"_index":30,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["interfac",{"_index":89,"title":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"coverage.html":{},"overview.html":{}}}],["interv",{"_index":130,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["interval=1000",{"_index":149,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["ipoint",{"_index":60,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["isnan(valu",{"_index":247,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["isreadi",{"_index":22,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["key",{"_index":310,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["kind",{"_index":418,"title":{},"body":{"license.html":{}}}],["last",{"_index":94,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["lastmodifiedfunct",{"_index":225,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["lastmodifiedfunction(metr",{"_index":233,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["lastreport",{"_index":96,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["lastvalu",{"_index":97,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["liabil",{"_index":432,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":429,"title":{},"body":{"license.html":{}}}],["lib/.../influxmetricreporter.t",{"_index":446,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lib/metrics/defaultsender.t",{"_index":5,"title":{},"body":{"classes/DefaultSender.html":{},"coverage.html":{}}}],["lib/metrics/defaultsender.ts:20",{"_index":41,"title":{},"body":{"classes/DefaultSender.html":{}}}],["lib/metrics/defaultsender.ts:28",{"_index":36,"title":{},"body":{"classes/DefaultSender.html":{}}}],["lib/metrics/defaultsender.ts:36",{"_index":28,"title":{},"body":{"classes/DefaultSender.html":{}}}],["lib/metrics/defaultsender.ts:54",{"_index":48,"title":{},"body":{"classes/DefaultSender.html":{}}}],["lib/metrics/defaultsender.ts:69",{"_index":55,"title":{},"body":{"classes/DefaultSender.html":{}}}],["lib/metrics/defaultsender.ts:79",{"_index":61,"title":{},"body":{"classes/DefaultSender.html":{}}}],["lib/metrics/influxmetricreporter.t",{"_index":91,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["lib/metrics/influxmetricreporter.ts:42",{"_index":329,"title":{},"body":{"interfaces/Sender.html":{}}}],["lib/metrics/influxmetricreporter.ts:50",{"_index":328,"title":{},"body":{"interfaces/Sender.html":{}}}],["lib/metrics/influxmetricreporter.ts:59",{"_index":330,"title":{},"body":{"interfaces/Sender.html":{}}}],["librari",{"_index":350,"title":{},"body":{"index.html":{}}}],["licens",{"_index":379,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["limit",{"_index":397,"title":{},"body":{"license.html":{}}}],["line",{"_index":449,"title":{},"body":{"unit-test.html":{}}}],["link",{"_index":192,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["log",{"_index":144,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["logger",{"_index":105,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["logmetadata",{"_index":140,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["made",{"_index":351,"title":{},"body":{"index.html":{}}}],["map",{"_index":99,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"dependencies.html":{}}}],["match",{"_index":88,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["meant",{"_index":354,"title":{},"body":{"index.html":{}}}],["measur",{"_index":251,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["memberof",{"_index":67,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["merchant",{"_index":421,"title":{},"body":{"license.html":{}}}],["merg",{"_index":400,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":139,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["meter",{"_index":106,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"miscellaneous/typealiases.html":{}}}],["meter.getcount",{"_index":215,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["method",{"_index":18,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/Sender.html":{}}}],["metric",{"_index":47,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["metric'",{"_index":309,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["metric.getgroup",{"_index":306,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["metric.getnam",{"_index":307,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["metricentri",{"_index":90,"title":{"interfaces/MetricEntry.html":{}},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"coverage.html":{}}}],["metricentry.lastreport",{"_index":245,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["metricentry.lastvalu",{"_index":244,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["metricid",{"_index":229,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["metricregistri",{"_index":107,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["metricreport",{"_index":108,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["metrics.foreach((metr",{"_index":228,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["metricst",{"_index":148,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["metrictyp",{"_index":117,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"miscellaneous/typealiases.html":{}}}],["millisecond",{"_index":109,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["minim",{"_index":131,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["minimum",{"_index":239,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["minreportingtimeout",{"_index":134,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["minreportingtimeout=1",{"_index":153,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["minut",{"_index":110,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["minute.convertto(minreportingtimeout",{"_index":165,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["miscellan",{"_index":443,"title":{"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/typealiases.html":{}}}],["mit",{"_index":380,"title":{},"body":{"index.html":{},"license.html":{}}}],["modifi",{"_index":399,"title":{},"body":{"license.html":{}}}],["modul",{"_index":353,"title":{"modules.html":{}},"body":{"index.html":{},"modules.html":{}}}],["name",{"_index":33,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["names.find((valu",{"_index":77,"title":{},"body":{"classes/DefaultSender.html":{}}}],["new",{"_index":71,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"coverage.html":{},"index.html":{},"unit-test.html":{}}}],["node",{"_index":352,"title":{},"body":{"index.html":{}}}],["nodejs.it",{"_index":355,"title":{},"body":{"index.html":{}}}],["nodejs.tim",{"_index":129,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["noninfring",{"_index":425,"title":{},"body":{"license.html":{}}}],["notic",{"_index":412,"title":{},"body":{"license.html":{}}}],["now",{"_index":201,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["npm",{"_index":357,"title":{},"body":{"index.html":{}}}],["null",{"_index":174,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["number",{"_index":79,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["object",{"_index":40,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["obtain",{"_index":390,"title":{},"body":{"license.html":{}}}],["option",{"_index":35,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/Sender.html":{}}}],["otherwis",{"_index":437,"title":{},"body":{"license.html":{}}}],["out",{"_index":439,"title":{},"body":{"license.html":{}}}],["overview",{"_index":441,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packag",{"_index":342,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":68,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["paramet",{"_index":31,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/Sender.html":{}}}],["particular",{"_index":423,"title":{},"body":{"license.html":{}}}],["password",{"_index":366,"title":{},"body":{"index.html":{}}}],["period",{"_index":183,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["permiss",{"_index":384,"title":{},"body":{"license.html":{}}}],["permit",{"_index":406,"title":{},"body":{"license.html":{}}}],["person",{"_index":389,"title":{},"body":{"license.html":{}}}],["point",{"_index":63,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["points.length",{"_index":236,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["points.push(point",{"_index":235,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["port",{"_index":368,"title":{},"body":{"index.html":{}}}],["portion",{"_index":415,"title":{},"body":{"license.html":{}}}],["prefix",{"_index":304,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["privat",{"_index":14,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["process",{"_index":121,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["promis",{"_index":58,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["properti",{"_index":13,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{}}}],["provid",{"_index":416,"title":{},"body":{"license.html":{}}}],["public",{"_index":19,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["publish",{"_index":401,"title":{},"body":{"license.html":{}}}],["purpos",{"_index":424,"title":{},"body":{"license.html":{}}}],["queue",{"_index":141,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["reach",{"_index":240,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["readi",{"_index":17,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["reason",{"_index":322,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["refer",{"_index":98,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["regist",{"_index":191,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["registri",{"_index":199,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["registry.newtimer(\"request",{"_index":372,"title":{},"body":{"index.html":{}}}],["report",{"_index":46,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["reporter.addmetricregistry(registri",{"_index":374,"title":{},"body":{"index.html":{}}}],["reporter.setlog(global.consol",{"_index":373,"title":{},"body":{"index.html":{}}}],["reporter.start",{"_index":375,"title":{},"body":{"index.html":{}}}],["reportfunct",{"_index":223,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["reportfunction(metr",{"_index":234,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["reportgauge(gaug",{"_index":246,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["reporthistogram(histogram",{"_index":256,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["reportmeter(met",{"_index":283,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["reportmetr",{"_index":227,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["reportmetricregistry(registri",{"_index":200,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["reporttimer(tim",{"_index":295,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["request",{"_index":371,"title":{},"body":{"index.html":{}}}],["requests.tim",{"_index":377,"title":{},"body":{"index.html":{}}}],["restrict",{"_index":396,"title":{},"body":{"license.html":{}}}],["result",{"_index":87,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["return",{"_index":54,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["right",{"_index":398,"title":{},"body":{"license.html":{}}}],["save",{"_index":146,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["schedul",{"_index":127,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["sell",{"_index":405,"title":{},"body":{"license.html":{}}}],["send",{"_index":23,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["send(point",{"_index":59,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["sender",{"_index":10,"title":{"interfaces/Sender.html":{}},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"coverage.html":{}}}],["senderreadi",{"_index":193,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["sendpoints(point",{"_index":316,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["set",{"_index":178,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["setinterv",{"_index":187,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"index.html":{}}}],["setlog(log",{"_index":182,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["settags(tag",{"_index":179,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["shall",{"_index":413,"title":{},"body":{"license.html":{}}}],["snapshot",{"_index":257,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["softwar",{"_index":392,"title":{},"body":{"license.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"dependencies.html":{}}}],["specif",{"_index":326,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["specifi",{"_index":62,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["start",{"_index":184,"title":{"index.html":{},"license.html":{}},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["state",{"_index":57,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["statement",{"_index":334,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["stdclock",{"_index":111,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["stop",{"_index":189,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["string",{"_index":78,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["subject",{"_index":408,"title":{},"body":{"license.html":{}}}],["sublicens",{"_index":403,"title":{},"body":{"license.html":{}}}],["substanti",{"_index":414,"title":{},"body":{"license.html":{}}}],["super",{"_index":158,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["support",{"_index":347,"title":{},"body":{"dependencies.html":{}}}],["support/regist",{"_index":100,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["t",{"_index":222,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["tabl",{"_index":341,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tablesort(document.getelementbyid('coverag",{"_index":340,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tag",{"_index":137,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["taggabl",{"_index":112,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["taggable.gettags().foreach((tag",{"_index":315,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["tags=new",{"_index":151,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["tags[key",{"_index":314,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["task(callback",{"_index":172,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["templat",{"_index":221,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["test",{"_index":447,"title":{"unit-test.html":{}},"body":{"unit-test.html":{}}}],["this.buildtags(gaug",{"_index":254,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.buildtags(histogram",{"_index":282,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.buildtags(met",{"_index":294,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.buildtags(tim",{"_index":303,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.clock",{"_index":163,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.config",{"_index":69,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.config.databas",{"_index":74,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.db",{"_index":70,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.db.createdatabase(databas",{"_index":83,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.db.getdatabasenam",{"_index":76,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.db.writepoints(point",{"_index":86,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.getfieldnameprefix(gaug",{"_index":250,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getfieldnameprefix(histogram",{"_index":259,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getfieldnameprefix(met",{"_index":284,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getfieldnameprefix(tim",{"_index":297,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getmeasurementname(gaug",{"_index":252,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getmeasurementname(histogram",{"_index":260,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getmeasurementname(met",{"_index":285,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getmeasurementname(tim",{"_index":298,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(meter.get15minuter",{"_index":287,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(meter.get1minuter",{"_index":289,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(meter.get5minuter",{"_index":291,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(meter.getmeanr",{"_index":293,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.get75thpercentil",{"_index":271,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.get95thpercentil",{"_index":273,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.get98thpercentil",{"_index":275,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.get999thpercentil",{"_index":279,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.get99thpercentil",{"_index":277,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.getmax",{"_index":263,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.getmean",{"_index":265,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.getmedian",{"_index":269,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.getmin",{"_index":267,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(snapshot.getstddev",{"_index":281,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(timer.get15minuter",{"_index":299,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(timer.get1minuter",{"_index":300,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(timer.get5minuter",{"_index":301,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.getnumber(timer.getmeanr",{"_index":302,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.haschanged(metricid",{"_index":232,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.interv",{"_index":160,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.log",{"_index":181,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.log.debug(`wrot",{"_index":320,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.log.error(`error",{"_index":323,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.logmetadata",{"_index":166,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.metricregistri",{"_index":195,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.metricregistries.foreach((registri",{"_index":197,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.metricregistries.length",{"_index":196,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.metricstates.get(metricid",{"_index":243,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.metricstates.has(metricid",{"_index":242,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.minreportingtimeout",{"_index":164,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.queu",{"_index":167,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.queue.push((callback",{"_index":175,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.queue.push(async",{"_index":317,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.readi",{"_index":84,"title":{},"body":{"classes/DefaultSender.html":{}}}],["this.report",{"_index":188,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.reportcounter(count",{"_index":205,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.reportgauge(gaug",{"_index":208,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.reporthistogram(histogram",{"_index":211,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.reportmeter(met",{"_index":214,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.reportmetricregistry(registri",{"_index":198,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.reportmetrics(registry.getcounterlist",{"_index":204,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.reportmetrics(registry.getgaugelist",{"_index":207,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.reportmetrics(registry.gethistogramlist",{"_index":210,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.reportmetrics(registry.getmeterlist",{"_index":213,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.reportmetrics(registry.gettimerlist",{"_index":216,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.reporttimer(tim",{"_index":217,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.send",{"_index":159,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.sender.init",{"_index":176,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.sender.isreadi",{"_index":194,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.sender.send(point",{"_index":319,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.sendpoints(point",{"_index":237,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.tag",{"_index":162,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.tags.foreach((tag",{"_index":313,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.tim",{"_index":186,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.timer.unref",{"_index":190,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.unit",{"_index":161,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["this.unit.convertto(this.interv",{"_index":185,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["time",{"_index":135,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["timeout",{"_index":132,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["timer",{"_index":113,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["timer.getcount",{"_index":218,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["timer.getsnapshot",{"_index":296,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["timestamp",{"_index":95,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["timeunit",{"_index":114,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["tort",{"_index":436,"title":{},"body":{"license.html":{}}}],["track",{"_index":93,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["tri",{"_index":318,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["trigger",{"_index":119,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["true",{"_index":85,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["type",{"_index":34,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["typealias",{"_index":444,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typescript",{"_index":349,"title":{},"body":{"index.html":{}}}],["unchang",{"_index":155,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["unit",{"_index":136,"title":{"unit-test.html":{}},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"unit-test.html":{}}}],["unit=millisecond",{"_index":150,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["unlock",{"_index":173,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["us",{"_index":124,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{},"index.html":{},"license.html":{}}}],["usag",{"_index":359,"title":{},"body":{"index.html":{}}}],["usernam",{"_index":364,"title":{},"body":{"index.html":{}}}],["valu",{"_index":43,"title":{},"body":{"classes/DefaultSender.html":{},"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["value.localecompare(databas",{"_index":81,"title":{},"body":{"classes/DefaultSender.html":{}}}],["void",{"_index":170,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["warranti",{"_index":417,"title":{},"body":{"license.html":{}}}],["whether",{"_index":433,"title":{},"body":{"license.html":{}}}],["without",{"_index":395,"title":{},"body":{"license.html":{}}}],["write",{"_index":324,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}],["x",{"_index":312,"title":{},"body":{"interfaces/MetricEntry.html":{},"interfaces/Sender.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/DefaultSender.html":{"url":"classes/DefaultSender.html","title":"class - DefaultSender","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DefaultSender\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/DefaultSender.ts\n        \n\n            \n                Description\n            \n            \n                Default implementation for an influxdb sender.\n\n            \n\n\n            \n                Implements\n            \n            \n                        Sender\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                config\n                            \n                            \n                                    Private\n                                db\n                            \n                            \n                                    Private\n                                ready\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                init\n                            \n                            \n                                    Public\n                                    Async\n                                isReady\n                            \n                            \n                                    Public\n                                    Async\n                                send\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(config: IClusterConfig)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/DefaultSender.ts:36\n                            \n                        \n\n                \n                    \n                            Creates an instance of DefaultSender.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    IClusterConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            config\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        config:     IClusterConfig\n\n                    \n                \n                    \n                        \n                            Type :     IClusterConfig\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/DefaultSender.ts:28\n                            \n                        \n\n                \n                    \n                        Influx client configuration object.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            db\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        db:     InfluxDB\n\n                    \n                \n                    \n                        \n                            Type :     InfluxDB\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/DefaultSender.ts:20\n                            \n                        \n\n                \n                    \n                        The influxdb client instance.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            ready\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        ready:     boolean\n\n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/DefaultSender.ts:36\n                            \n                        \n\n                \n                    \n                        Indicates if he sender is ready to report metrics.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Async\n                            init\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        init()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/DefaultSender.ts:54\n                            \n                        \n\n\n                \n                    \n                            Ensures that a database is existing before sending data.\n\n\n                            \n                                Returns :     any\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Async\n                            isReady\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        isReady()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/DefaultSender.ts:69\n                            \n                        \n\n\n                \n                    \n                            Gets the ready state.\n\n\n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Async\n                            send\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        send(points: IPoint[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/DefaultSender.ts:79\n                            \n                        \n\n\n                \n                    \n                            Sends the specified data points to the DB.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        points\n                                                        \n                                                                    IPoint[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { IClusterConfig, InfluxDB, IPoint } from \"influx\";\nimport { Sender } from \"./InfluxMetricReporter\";\n\n/**\n * Default implementation for an influxdb sender.\n *\n * @export\n * @class DefaultSender\n * @implements {Sender}\n */\nexport class DefaultSender implements Sender {\n\n    /**\n     * The influxdb client instance.\n     *\n     * @private\n     * @type {InfluxDB}\n     * @memberof DefaultSender\n     */\n    private db: InfluxDB;\n    /**\n     * Influx client configuration object.\n     *\n     * @private\n     * @type {IClusterConfig}\n     * @memberof DefaultSender\n     */\n    private config: IClusterConfig;\n    /**\n     * Indicates if he sender is ready to report metrics.\n     *\n     * @private\n     * @type {boolean}\n     * @memberof DefaultSender\n     */\n    private ready: boolean = false;\n\n    /**\n     * Creates an instance of DefaultSender.\n     *\n     * @param {IClusterConfig} config\n     * @memberof DefaultSender\n     */\n    public constructor(config: IClusterConfig) {\n        this.config = config;\n        this.db = new InfluxDB(config);\n    }\n\n    /**\n     * Ensures that a database is existing before sending data.\n     *\n     * @memberof DefaultSender\n     */\n    public async init() {\n        const database = this.config.database;\n        const names = await this.db.getDatabaseNames();\n        if (!names.find((value: string, index: number, arr: string[]) => value.localeCompare(database) === 0)) {\n            await this.db.createDatabase(database);\n        }\n        this.ready = true;\n    }\n\n    /**\n     * Gets the ready state.\n     *\n     * @returns {Promise}\n     * @memberof DefaultSender\n     */\n    public async isReady(): Promise {\n        return this.ready;\n    }\n\n    /**\n     * Sends the specified data points to the DB.\n     *\n     * @param {IPoint[]} points\n     * @memberof DefaultSender\n     */\n    public async send(points: IPoint[]) {\n        await this.db.writePoints(points);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MetricEntry.html":{"url":"interfaces/MetricEntry.html","title":"interface - MetricEntry","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MetricEntry\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/InfluxMetricReporter.ts\n        \n\n            \n                Description\n            \n            \n                Entry interface to track the last value and timestamp of a metric instance.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        lastReport\n                                \n                                \n                                        lastValue\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        lastReport\n                                    \n                                \n                                \n                                    \n                                        lastReport:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Timestamp of the last reporting.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastValue\n                                    \n                                \n                                \n                                    \n                                        lastValue:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Last reported reference value.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport * as async from \"async\";\nimport { IPoint } from \"influx\";\nimport {\n    Clock,\n    Counter,\n    Gauge,\n    Histogram,\n    Logger,\n    Meter,\n    Metric,\n    MetricRegistry,\n    MetricReporter,\n    MILLISECOND,\n    MINUTE,\n    StdClock,\n    Taggable,\n    Timer,\n    TimeUnit,\n} from \"inspector-metrics\";\n\n/**\n * Enumeration of all metric types.\n */\nexport type MetricType = \"counter\" | \"gauge\" | \"histogram\" | \"meter\" | \"timer\";\n\n/**\n * Sender interface for influxdb client abstraction.\n *\n * @export\n * @interface Sender\n */\nexport interface Sender {\n\n    /**\n     * Indicates if the sender is ready to send data.\n     *\n     * @returns {Promise}\n     * @memberof Sender\n     */\n    isReady(): Promise;\n\n    /**\n     * Triggers the initialization process.\n     *\n     * @returns {Promise}\n     * @memberof Sender\n     */\n    init(): Promise;\n\n    /**\n     * Sends the given data points to influxdb.\n     *\n     * @param {IPoint[]} points\n     * @returns {Promise}\n     * @memberof Sender\n     */\n    send(points: IPoint[]): Promise;\n\n}\n\n/**\n * Entry interface to track the last value and timestamp of a metric instance.\n *\n * @interface MetricEntry\n */\ninterface MetricEntry {\n    /**\n     * Timestamp of the last reporting.\n     *\n     * @type {number}\n     * @memberof MetricEntry\n     */\n    lastReport: number;\n\n    /**\n     * Last reported reference value.\n     *\n     * @type {number}\n     * @memberof MetricEntry\n     */\n    lastValue: number;\n}\n\n/**\n * InfluxDB reporter implementation.\n *\n * @export\n * @class InfluxMetricReporter\n * @extends {MetricReporter}\n */\nexport class InfluxMetricReporter extends MetricReporter {\n\n    /**\n     * Clock used to determine the current timestamp.\n     *\n     * @private\n     * @type {Clock}\n     * @memberof InfluxMetricReporter\n     */\n    private clock: Clock;\n    /**\n     * Reference for the object returned by the scheduler function.\n     *\n     * @private\n     * @type {NodeJS.Timer}\n     * @memberof InfluxMetricReporter\n     */\n    private timer: NodeJS.Timer;\n    /**\n     * Reporting interval.\n     *\n     * @private\n     * @type {number}\n     * @memberof InfluxMetricReporter\n     */\n    private interval: number;\n    /**\n     * Minimal timeout to include a metric instance into a reporting.\n     *\n     * @private\n     * @type {number}\n     * @memberof InfluxMetricReporter\n     */\n    private minReportingTimeout: number;\n    /**\n     * Time unit for the reporting interval.\n     *\n     * @private\n     * @type {TimeUnit}\n     * @memberof InfluxMetricReporter\n     */\n    private unit: TimeUnit;\n    /**\n     * Tags assigned to this reporter instance - reported for every metric instance.\n     *\n     * @private\n     * @type {Map}\n     * @memberof InfluxMetricReporter\n     */\n    private tags: Map;\n    /**\n     * Metadata for the logger.\n     *\n     * @private\n     * @type {*}\n     * @memberof InfluxMetricReporter\n     */\n    private logMetadata: any;\n    /**\n     * async queue used to queue data point sending.\n     *\n     * @private\n     * @type {async.AsyncQueue}\n     * @memberof InfluxMetricReporter\n     */\n    private queue: async.AsyncQueue;\n    /**\n     * Minimal logger interface to report failures.\n     *\n     * @private\n     * @type {Logger}\n     * @memberof InfluxMetricReporter\n     */\n    private log: Logger = console;\n    /**\n     * Sender instance used to report metrics.\n     *\n     * @private\n     * @type {Sender}\n     * @memberof InfluxMetricReporter\n     */\n    private sender: Sender;\n    /**\n     * Saves the state of each reported metrics.\n     *\n     * @private\n     * @type {Map}\n     * @memberof InfluxMetricReporter\n     */\n    private metricStates: Map = new Map();\n\n    /**\n     * Creates an instance of InfluxMetricReporter.\n     *\n     * @param {Sender} sender The influx sender instance.\n     * @param {number} [interval=1000] The reporting interval.\n     * @param {TimeUnit} [unit=MILLISECOND] The time unit for the reporting interval.\n     * @param {Map} [tags=new Map()] Tags assigned to every metric.\n     * @param {Clock} [clock=new StdClock()] The clock - used to determine the timestamp of the metrics while reporting.\n     * @param {number} [minReportingTimeout=1] The time in minutes the report sends even unchanged metrics.\n     * @memberof InfluxMetricReporter\n     */\n    public constructor(\n        sender: Sender,\n        interval: number = 1000,\n        unit: TimeUnit = MILLISECOND,\n        tags: Map = new Map(),\n        clock: Clock = new StdClock(),\n        minReportingTimeout = 1) {\n        super();\n\n        this.sender = sender;\n        this.interval = interval;\n        this.unit = unit;\n        this.tags = tags;\n        this.clock = clock;\n        this.minReportingTimeout = MINUTE.convertTo(minReportingTimeout, MILLISECOND);\n\n        this.logMetadata = {\n            interval,\n            tags,\n            unit,\n        };\n\n        this.queue = async.queue((task: (clb: () => void) => void, callback: () => void) => {\n            task(callback);\n        }, 1);\n\n        let unlock: () => void = null;\n        this.queue.push((callback: () => void) => {\n            unlock = callback;\n        });\n\n        this.sender.init()\n            .then(() => unlock());\n    }\n\n    /**\n     * Gets the reporter tags.\n     *\n     * @returns {Map}\n     * @memberof InfluxMetricReporter\n     */\n    public getTags(): Map {\n        return this.tags;\n    }\n\n    /**\n     * Sets the reporter tags.\n     *\n     * @param {Map} tags\n     * @memberof InfluxMetricReporter\n     */\n    public setTags(tags: Map): void {\n        this.tags = tags;\n    }\n\n    /**\n     * Gets the logger instance.\n     *\n     * @returns {Logger}\n     * @memberof InfluxMetricReporter\n     */\n    public getLog(): Logger {\n        return this.log;\n    }\n\n    /**\n     * Sets the logger instance.\n     *\n     * @param {Logger} log\n     * @memberof InfluxMetricReporter\n     */\n    public setLog(log: Logger): void {\n        this.log = log;\n    }\n\n    /**\n     * Uses the scheduler function to trigger periodical reporting.\n     *\n     * @memberof InfluxMetricReporter\n     */\n    public start(): void {\n        const interval: number = this.unit.convertTo(this.interval, MILLISECOND);\n        this.timer = setInterval(() => this.report(), interval);\n    }\n\n    /**\n     * Stops the timer reference returned by the scheduler function.\n     *\n     * @memberof InfluxMetricReporter\n     */\n    public stop(): void {\n        if (this.timer) {\n            this.timer.unref();\n        }\n    }\n\n    /**\n     * Reports the data points for each registered {@link MetricRegistry}.\n     *\n     * @private\n     * @memberof InfluxMetricReporter\n     */\n    private async report() {\n        const senderReady = await this.sender.isReady();\n        if (senderReady && this.metricRegistries && this.metricRegistries.length > 0) {\n            this.metricRegistries.forEach((registry) => this.reportMetricRegistry(registry));\n        }\n    }\n\n    /**\n     * Reports the data points for the specified {@link MetricRegistry}.\n     *\n     * @private\n     * @param {MetricRegistry} registry\n     * @memberof InfluxMetricReporter\n     */\n    private reportMetricRegistry(registry: MetricRegistry): void {\n        const now: Date = new Date(this.clock.time().milliseconds);\n\n        this.reportMetrics(registry.getCounterList(), now, \"counter\",\n            (counter: Counter, date: Date) => this.reportCounter(counter, date),\n            (counter: Counter) => counter.getCount());\n        this.reportMetrics(registry.getGaugeList(), now, \"gauge\",\n            (gauge: Gauge, date: Date) => this.reportGauge(gauge, date),\n            (gauge: Gauge) => gauge.getValue());\n        this.reportMetrics(registry.getHistogramList(), now, \"histogram\",\n            (histogram: Histogram, date: Date) => this.reportHistogram(histogram, date),\n            (histogram: Histogram) => histogram.getCount());\n        this.reportMetrics(registry.getMeterList(), now, \"meter\",\n            (meter: Meter, date: Date) => this.reportMeter(meter, date),\n            (meter: Meter) => meter.getCount());\n        this.reportMetrics(registry.getTimerList(), now, \"timer\",\n            (timer: Timer, date: Date) => this.reportTimer(timer, date),\n            (timer: Timer) => timer.getCount());\n    }\n\n    /**\n     * Reports a collection of metric instance for a certain type.\n     *\n     * @private\n     * @template T\n     * @param {T[]} metrics\n     * @param {Date} date\n     * @param {MetricType} type the type to report.\n     * @param {(metric: Metric, date: Date) => IPoint} reportFunction\n     *      The function to build the data points for a certain metric.\n     * @param {(metric: Metric) => number} lastModifiedFunction\n     *      function to determine if a metric has a different value since the last reporting.\n     * @memberof InfluxMetricReporter\n     */\n    private reportMetrics(\n        metrics: T[],\n        date: Date,\n        type: MetricType,\n        reportFunction: (metric: Metric, date: Date) => IPoint,\n        lastModifiedFunction: (metric: Metric) => number): void {\n\n        const points: IPoint[] = [];\n        metrics.forEach((metric) => {\n            const metricId = (metric as any).id;\n            let changed = true;\n            if (metricId) {\n                changed = this.hasChanged(metricId, lastModifiedFunction(metric), date);\n            }\n\n            if (changed) {\n                const point = reportFunction(metric, date);\n                if (!!point) {\n                    points.push(point);\n                }\n            }\n        });\n        if (points.length > 0) {\n            this.sendPoints(points, type);\n        }\n    }\n\n    /**\n     * Determines if the specified metric has changed. This is always true if\n     * the minimum-reporting timeout was reached.\n     *\n     * @private\n     * @param {number} metricId\n     * @param {number} lastValue\n     * @param {Date} date\n     * @returns {boolean}\n     * @memberof InfluxMetricReporter\n     */\n    private hasChanged(metricId: number, lastValue: number, date: Date): boolean {\n        let changed = true;\n        let metricEntry = {\n            lastReport: 0,\n            lastValue,\n        };\n        if (this.metricStates.has(metricId)) {\n            metricEntry = this.metricStates.get(metricId);\n            changed = metricEntry.lastValue !== lastValue;\n            if (!changed) {\n                changed = metricEntry.lastReport + this.minReportingTimeout } gauge\n     * @param {Date} date\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    private reportGauge(gauge: Gauge, date: Date): IPoint {\n        const value = gauge.getValue();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(gauge);\n        const measurement = this.getMeasurementName(gauge);\n\n        fields[`${fieldNamePrefix}value`] = gauge.getValue() || 0;\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(gauge),\n            timestamp: date,\n        };\n    }\n\n    /**\n     * Computes and reports the fields of the histogram.\n     *\n     * @private\n     * @param {Histogram} histogram\n     * @param {Date} date\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    private reportHistogram(histogram: Histogram, date: Date): IPoint {\n        const value = histogram.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const snapshot = histogram.getSnapshot();\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(histogram);\n        const measurement = this.getMeasurementName(histogram);\n\n        fields[`${fieldNamePrefix}count`] = histogram.getCount() || 0;\n        fields[`${fieldNamePrefix}max`] = this.getNumber(snapshot.getMax());\n        fields[`${fieldNamePrefix}mean`] = this.getNumber(snapshot.getMean());\n        fields[`${fieldNamePrefix}min`] = this.getNumber(snapshot.getMin());\n        fields[`${fieldNamePrefix}p50`] = this.getNumber(snapshot.getMedian());\n        fields[`${fieldNamePrefix}p75`] = this.getNumber(snapshot.get75thPercentile());\n        fields[`${fieldNamePrefix}p95`] = this.getNumber(snapshot.get95thPercentile());\n        fields[`${fieldNamePrefix}p98`] = this.getNumber(snapshot.get98thPercentile());\n        fields[`${fieldNamePrefix}p99`] = this.getNumber(snapshot.get99thPercentile());\n        fields[`${fieldNamePrefix}p999`] = this.getNumber(snapshot.get999thPercentile());\n        fields[`${fieldNamePrefix}stddev`] = this.getNumber(snapshot.getStdDev());\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(histogram),\n            timestamp: date,\n        };\n    }\n\n    /**\n     * Computes and reports the fields of the meter.\n     *\n     * @private\n     * @param {Meter} meter\n     * @param {Date} date\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    private reportMeter(meter: Meter, date: Date): IPoint {\n        const value = meter.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(meter);\n        const measurement = this.getMeasurementName(meter);\n\n        fields[`${fieldNamePrefix}count`] = meter.getCount() || 0;\n        fields[`${fieldNamePrefix}m15_rate`] = this.getNumber(meter.get15MinuteRate());\n        fields[`${fieldNamePrefix}m1_rate`] = this.getNumber(meter.get1MinuteRate());\n        fields[`${fieldNamePrefix}m5_rate`] = this.getNumber(meter.get5MinuteRate());\n        fields[`${fieldNamePrefix}mean_rate`] = this.getNumber(meter.getMeanRate());\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(meter),\n            timestamp: date,\n        };\n    }\n\n    /**\n     * Computes and reports the fields of the timer.\n     *\n     * @private\n     * @param {Timer} timer\n     * @param {Date} date\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    private reportTimer(timer: Timer, date: Date): IPoint {\n        const value = timer.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const snapshot = timer.getSnapshot();\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(timer);\n        const measurement = this.getMeasurementName(timer);\n\n        fields[`${fieldNamePrefix}count`] = timer.getCount() || 0;\n        fields[`${fieldNamePrefix}m15_rate`] = this.getNumber(timer.get15MinuteRate());\n        fields[`${fieldNamePrefix}m1_rate`] = this.getNumber(timer.get1MinuteRate());\n        fields[`${fieldNamePrefix}m5_rate`] = this.getNumber(timer.get5MinuteRate());\n        fields[`${fieldNamePrefix}max`] = this.getNumber(snapshot.getMax());\n        fields[`${fieldNamePrefix}mean`] = this.getNumber(snapshot.getMean());\n        fields[`${fieldNamePrefix}mean_rate`] = this.getNumber(timer.getMeanRate());\n        fields[`${fieldNamePrefix}min`] = this.getNumber(snapshot.getMin());\n        fields[`${fieldNamePrefix}p50`] = this.getNumber(snapshot.getMedian());\n        fields[`${fieldNamePrefix}p75`] = this.getNumber(snapshot.get75thPercentile());\n        fields[`${fieldNamePrefix}p95`] = this.getNumber(snapshot.get95thPercentile());\n        fields[`${fieldNamePrefix}p98`] = this.getNumber(snapshot.get98thPercentile());\n        fields[`${fieldNamePrefix}p99`] = this.getNumber(snapshot.get99thPercentile());\n        fields[`${fieldNamePrefix}p999`] = this.getNumber(snapshot.get999thPercentile());\n        fields[`${fieldNamePrefix}stddev`] = this.getNumber(snapshot.getStdDev());\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(timer),\n            timestamp: date,\n        };\n    }\n\n    /**\n     * Builds the prefix for a field name.\n     *\n     * @private\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof InfluxMetricReporter\n     */\n    private getFieldNamePrefix(metric: Metric): string {\n        if (metric.getGroup()) {\n            return `${metric.getName()}.`;\n        }\n        return \"\";\n    }\n\n    /**\n     * Builds the prefix for the metric name.\n     *\n     * @private\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof InfluxMetricReporter\n     */\n    private getMeasurementName(metric: Metric): string {\n        if (metric.getGroup()) {\n            return metric.getGroup();\n        }\n        return metric.getName();\n    }\n\n    /**\n     * Builds the tags using the metric's tags and this reportes tags.\n     *\n     * @private\n     * @param {Taggable} taggable\n     * @returns {{ [key: string]: string }}\n     * @memberof InfluxMetricReporter\n     */\n    private buildTags(taggable: Taggable): { [key: string]: string } {\n        const tags: { [x: string]: string } = {};\n        this.tags.forEach((tag, key) => tags[key] = tag);\n        taggable.getTags().forEach((tag, key) => tags[key] = tag);\n        return tags;\n    }\n\n    /**\n     * Uses the sender to report the given data points.\n     *\n     * @private\n     * @param {IPoint[]} points\n     * @param {MetricType} type\n     * @memberof InfluxMetricReporter\n     */\n    private sendPoints(points: IPoint[], type: MetricType) {\n        this.queue.push(async (callback: () => void) => {\n            try {\n                await this.sender.send(points);\n                if (this.log) {\n                    this.log.debug(`wrote ${type} metrics`, this.logMetadata);\n                }\n            } catch (reason) {\n                if (this.log) {\n                    this.log.error(`error writing ${type} metrics - reason: ${reason}`, reason, this.logMetadata);\n                }\n            } finally {\n                callback();\n            }\n        });\n    }\n\n    /**\n     * Either gets 0 or the specifed value.\n     *\n     * @private\n     * @param {number} value\n     * @returns {number}\n     * @memberof InfluxMetricReporter\n     */\n    private getNumber(value: number): number {\n        if (isNaN(value)) {\n            return 0;\n        }\n        return value;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Sender.html":{"url":"interfaces/Sender.html","title":"interface - Sender","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Sender\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/InfluxMetricReporter.ts\n        \n\n            \n                Description\n            \n            \n                Sender interface for influxdb client abstraction.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    init\n                                \n                                \n                                    isReady\n                                \n                                \n                                    send\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            init\n                            \n                            \n                        \n                    \n                \n                \n                    \ninit()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/InfluxMetricReporter.ts:50\n                            \n                        \n\n\n                \n                    \n                            Triggers the initialization process.\n\n\n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isReady\n                            \n                            \n                        \n                    \n                \n                \n                    \nisReady()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/InfluxMetricReporter.ts:42\n                            \n                        \n\n\n                \n                    \n                            Indicates if the sender is ready to send data.\n\n\n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            send\n                            \n                            \n                        \n                    \n                \n                \n                    \nsend(points: IPoint[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/InfluxMetricReporter.ts:59\n                            \n                        \n\n\n                \n                    \n                            Sends the given data points to influxdb.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        points\n                                                        \n                                                                    IPoint[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import \"source-map-support/register\";\n\nimport * as async from \"async\";\nimport { IPoint } from \"influx\";\nimport {\n    Clock,\n    Counter,\n    Gauge,\n    Histogram,\n    Logger,\n    Meter,\n    Metric,\n    MetricRegistry,\n    MetricReporter,\n    MILLISECOND,\n    MINUTE,\n    StdClock,\n    Taggable,\n    Timer,\n    TimeUnit,\n} from \"inspector-metrics\";\n\n/**\n * Enumeration of all metric types.\n */\nexport type MetricType = \"counter\" | \"gauge\" | \"histogram\" | \"meter\" | \"timer\";\n\n/**\n * Sender interface for influxdb client abstraction.\n *\n * @export\n * @interface Sender\n */\nexport interface Sender {\n\n    /**\n     * Indicates if the sender is ready to send data.\n     *\n     * @returns {Promise}\n     * @memberof Sender\n     */\n    isReady(): Promise;\n\n    /**\n     * Triggers the initialization process.\n     *\n     * @returns {Promise}\n     * @memberof Sender\n     */\n    init(): Promise;\n\n    /**\n     * Sends the given data points to influxdb.\n     *\n     * @param {IPoint[]} points\n     * @returns {Promise}\n     * @memberof Sender\n     */\n    send(points: IPoint[]): Promise;\n\n}\n\n/**\n * Entry interface to track the last value and timestamp of a metric instance.\n *\n * @interface MetricEntry\n */\ninterface MetricEntry {\n    /**\n     * Timestamp of the last reporting.\n     *\n     * @type {number}\n     * @memberof MetricEntry\n     */\n    lastReport: number;\n\n    /**\n     * Last reported reference value.\n     *\n     * @type {number}\n     * @memberof MetricEntry\n     */\n    lastValue: number;\n}\n\n/**\n * InfluxDB reporter implementation.\n *\n * @export\n * @class InfluxMetricReporter\n * @extends {MetricReporter}\n */\nexport class InfluxMetricReporter extends MetricReporter {\n\n    /**\n     * Clock used to determine the current timestamp.\n     *\n     * @private\n     * @type {Clock}\n     * @memberof InfluxMetricReporter\n     */\n    private clock: Clock;\n    /**\n     * Reference for the object returned by the scheduler function.\n     *\n     * @private\n     * @type {NodeJS.Timer}\n     * @memberof InfluxMetricReporter\n     */\n    private timer: NodeJS.Timer;\n    /**\n     * Reporting interval.\n     *\n     * @private\n     * @type {number}\n     * @memberof InfluxMetricReporter\n     */\n    private interval: number;\n    /**\n     * Minimal timeout to include a metric instance into a reporting.\n     *\n     * @private\n     * @type {number}\n     * @memberof InfluxMetricReporter\n     */\n    private minReportingTimeout: number;\n    /**\n     * Time unit for the reporting interval.\n     *\n     * @private\n     * @type {TimeUnit}\n     * @memberof InfluxMetricReporter\n     */\n    private unit: TimeUnit;\n    /**\n     * Tags assigned to this reporter instance - reported for every metric instance.\n     *\n     * @private\n     * @type {Map}\n     * @memberof InfluxMetricReporter\n     */\n    private tags: Map;\n    /**\n     * Metadata for the logger.\n     *\n     * @private\n     * @type {*}\n     * @memberof InfluxMetricReporter\n     */\n    private logMetadata: any;\n    /**\n     * async queue used to queue data point sending.\n     *\n     * @private\n     * @type {async.AsyncQueue}\n     * @memberof InfluxMetricReporter\n     */\n    private queue: async.AsyncQueue;\n    /**\n     * Minimal logger interface to report failures.\n     *\n     * @private\n     * @type {Logger}\n     * @memberof InfluxMetricReporter\n     */\n    private log: Logger = console;\n    /**\n     * Sender instance used to report metrics.\n     *\n     * @private\n     * @type {Sender}\n     * @memberof InfluxMetricReporter\n     */\n    private sender: Sender;\n    /**\n     * Saves the state of each reported metrics.\n     *\n     * @private\n     * @type {Map}\n     * @memberof InfluxMetricReporter\n     */\n    private metricStates: Map = new Map();\n\n    /**\n     * Creates an instance of InfluxMetricReporter.\n     *\n     * @param {Sender} sender The influx sender instance.\n     * @param {number} [interval=1000] The reporting interval.\n     * @param {TimeUnit} [unit=MILLISECOND] The time unit for the reporting interval.\n     * @param {Map} [tags=new Map()] Tags assigned to every metric.\n     * @param {Clock} [clock=new StdClock()] The clock - used to determine the timestamp of the metrics while reporting.\n     * @param {number} [minReportingTimeout=1] The time in minutes the report sends even unchanged metrics.\n     * @memberof InfluxMetricReporter\n     */\n    public constructor(\n        sender: Sender,\n        interval: number = 1000,\n        unit: TimeUnit = MILLISECOND,\n        tags: Map = new Map(),\n        clock: Clock = new StdClock(),\n        minReportingTimeout = 1) {\n        super();\n\n        this.sender = sender;\n        this.interval = interval;\n        this.unit = unit;\n        this.tags = tags;\n        this.clock = clock;\n        this.minReportingTimeout = MINUTE.convertTo(minReportingTimeout, MILLISECOND);\n\n        this.logMetadata = {\n            interval,\n            tags,\n            unit,\n        };\n\n        this.queue = async.queue((task: (clb: () => void) => void, callback: () => void) => {\n            task(callback);\n        }, 1);\n\n        let unlock: () => void = null;\n        this.queue.push((callback: () => void) => {\n            unlock = callback;\n        });\n\n        this.sender.init()\n            .then(() => unlock());\n    }\n\n    /**\n     * Gets the reporter tags.\n     *\n     * @returns {Map}\n     * @memberof InfluxMetricReporter\n     */\n    public getTags(): Map {\n        return this.tags;\n    }\n\n    /**\n     * Sets the reporter tags.\n     *\n     * @param {Map} tags\n     * @memberof InfluxMetricReporter\n     */\n    public setTags(tags: Map): void {\n        this.tags = tags;\n    }\n\n    /**\n     * Gets the logger instance.\n     *\n     * @returns {Logger}\n     * @memberof InfluxMetricReporter\n     */\n    public getLog(): Logger {\n        return this.log;\n    }\n\n    /**\n     * Sets the logger instance.\n     *\n     * @param {Logger} log\n     * @memberof InfluxMetricReporter\n     */\n    public setLog(log: Logger): void {\n        this.log = log;\n    }\n\n    /**\n     * Uses the scheduler function to trigger periodical reporting.\n     *\n     * @memberof InfluxMetricReporter\n     */\n    public start(): void {\n        const interval: number = this.unit.convertTo(this.interval, MILLISECOND);\n        this.timer = setInterval(() => this.report(), interval);\n    }\n\n    /**\n     * Stops the timer reference returned by the scheduler function.\n     *\n     * @memberof InfluxMetricReporter\n     */\n    public stop(): void {\n        if (this.timer) {\n            this.timer.unref();\n        }\n    }\n\n    /**\n     * Reports the data points for each registered {@link MetricRegistry}.\n     *\n     * @private\n     * @memberof InfluxMetricReporter\n     */\n    private async report() {\n        const senderReady = await this.sender.isReady();\n        if (senderReady && this.metricRegistries && this.metricRegistries.length > 0) {\n            this.metricRegistries.forEach((registry) => this.reportMetricRegistry(registry));\n        }\n    }\n\n    /**\n     * Reports the data points for the specified {@link MetricRegistry}.\n     *\n     * @private\n     * @param {MetricRegistry} registry\n     * @memberof InfluxMetricReporter\n     */\n    private reportMetricRegistry(registry: MetricRegistry): void {\n        const now: Date = new Date(this.clock.time().milliseconds);\n\n        this.reportMetrics(registry.getCounterList(), now, \"counter\",\n            (counter: Counter, date: Date) => this.reportCounter(counter, date),\n            (counter: Counter) => counter.getCount());\n        this.reportMetrics(registry.getGaugeList(), now, \"gauge\",\n            (gauge: Gauge, date: Date) => this.reportGauge(gauge, date),\n            (gauge: Gauge) => gauge.getValue());\n        this.reportMetrics(registry.getHistogramList(), now, \"histogram\",\n            (histogram: Histogram, date: Date) => this.reportHistogram(histogram, date),\n            (histogram: Histogram) => histogram.getCount());\n        this.reportMetrics(registry.getMeterList(), now, \"meter\",\n            (meter: Meter, date: Date) => this.reportMeter(meter, date),\n            (meter: Meter) => meter.getCount());\n        this.reportMetrics(registry.getTimerList(), now, \"timer\",\n            (timer: Timer, date: Date) => this.reportTimer(timer, date),\n            (timer: Timer) => timer.getCount());\n    }\n\n    /**\n     * Reports a collection of metric instance for a certain type.\n     *\n     * @private\n     * @template T\n     * @param {T[]} metrics\n     * @param {Date} date\n     * @param {MetricType} type the type to report.\n     * @param {(metric: Metric, date: Date) => IPoint} reportFunction\n     *      The function to build the data points for a certain metric.\n     * @param {(metric: Metric) => number} lastModifiedFunction\n     *      function to determine if a metric has a different value since the last reporting.\n     * @memberof InfluxMetricReporter\n     */\n    private reportMetrics(\n        metrics: T[],\n        date: Date,\n        type: MetricType,\n        reportFunction: (metric: Metric, date: Date) => IPoint,\n        lastModifiedFunction: (metric: Metric) => number): void {\n\n        const points: IPoint[] = [];\n        metrics.forEach((metric) => {\n            const metricId = (metric as any).id;\n            let changed = true;\n            if (metricId) {\n                changed = this.hasChanged(metricId, lastModifiedFunction(metric), date);\n            }\n\n            if (changed) {\n                const point = reportFunction(metric, date);\n                if (!!point) {\n                    points.push(point);\n                }\n            }\n        });\n        if (points.length > 0) {\n            this.sendPoints(points, type);\n        }\n    }\n\n    /**\n     * Determines if the specified metric has changed. This is always true if\n     * the minimum-reporting timeout was reached.\n     *\n     * @private\n     * @param {number} metricId\n     * @param {number} lastValue\n     * @param {Date} date\n     * @returns {boolean}\n     * @memberof InfluxMetricReporter\n     */\n    private hasChanged(metricId: number, lastValue: number, date: Date): boolean {\n        let changed = true;\n        let metricEntry = {\n            lastReport: 0,\n            lastValue,\n        };\n        if (this.metricStates.has(metricId)) {\n            metricEntry = this.metricStates.get(metricId);\n            changed = metricEntry.lastValue !== lastValue;\n            if (!changed) {\n                changed = metricEntry.lastReport + this.minReportingTimeout } gauge\n     * @param {Date} date\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    private reportGauge(gauge: Gauge, date: Date): IPoint {\n        const value = gauge.getValue();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(gauge);\n        const measurement = this.getMeasurementName(gauge);\n\n        fields[`${fieldNamePrefix}value`] = gauge.getValue() || 0;\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(gauge),\n            timestamp: date,\n        };\n    }\n\n    /**\n     * Computes and reports the fields of the histogram.\n     *\n     * @private\n     * @param {Histogram} histogram\n     * @param {Date} date\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    private reportHistogram(histogram: Histogram, date: Date): IPoint {\n        const value = histogram.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const snapshot = histogram.getSnapshot();\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(histogram);\n        const measurement = this.getMeasurementName(histogram);\n\n        fields[`${fieldNamePrefix}count`] = histogram.getCount() || 0;\n        fields[`${fieldNamePrefix}max`] = this.getNumber(snapshot.getMax());\n        fields[`${fieldNamePrefix}mean`] = this.getNumber(snapshot.getMean());\n        fields[`${fieldNamePrefix}min`] = this.getNumber(snapshot.getMin());\n        fields[`${fieldNamePrefix}p50`] = this.getNumber(snapshot.getMedian());\n        fields[`${fieldNamePrefix}p75`] = this.getNumber(snapshot.get75thPercentile());\n        fields[`${fieldNamePrefix}p95`] = this.getNumber(snapshot.get95thPercentile());\n        fields[`${fieldNamePrefix}p98`] = this.getNumber(snapshot.get98thPercentile());\n        fields[`${fieldNamePrefix}p99`] = this.getNumber(snapshot.get99thPercentile());\n        fields[`${fieldNamePrefix}p999`] = this.getNumber(snapshot.get999thPercentile());\n        fields[`${fieldNamePrefix}stddev`] = this.getNumber(snapshot.getStdDev());\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(histogram),\n            timestamp: date,\n        };\n    }\n\n    /**\n     * Computes and reports the fields of the meter.\n     *\n     * @private\n     * @param {Meter} meter\n     * @param {Date} date\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    private reportMeter(meter: Meter, date: Date): IPoint {\n        const value = meter.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(meter);\n        const measurement = this.getMeasurementName(meter);\n\n        fields[`${fieldNamePrefix}count`] = meter.getCount() || 0;\n        fields[`${fieldNamePrefix}m15_rate`] = this.getNumber(meter.get15MinuteRate());\n        fields[`${fieldNamePrefix}m1_rate`] = this.getNumber(meter.get1MinuteRate());\n        fields[`${fieldNamePrefix}m5_rate`] = this.getNumber(meter.get5MinuteRate());\n        fields[`${fieldNamePrefix}mean_rate`] = this.getNumber(meter.getMeanRate());\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(meter),\n            timestamp: date,\n        };\n    }\n\n    /**\n     * Computes and reports the fields of the timer.\n     *\n     * @private\n     * @param {Timer} timer\n     * @param {Date} date\n     * @returns {IPoint}\n     * @memberof InfluxMetricReporter\n     */\n    private reportTimer(timer: Timer, date: Date): IPoint {\n        const value = timer.getCount();\n        if (!value || isNaN(value)) {\n            return null;\n        }\n        const snapshot = timer.getSnapshot();\n        const fields: any = {};\n        const fieldNamePrefix = this.getFieldNamePrefix(timer);\n        const measurement = this.getMeasurementName(timer);\n\n        fields[`${fieldNamePrefix}count`] = timer.getCount() || 0;\n        fields[`${fieldNamePrefix}m15_rate`] = this.getNumber(timer.get15MinuteRate());\n        fields[`${fieldNamePrefix}m1_rate`] = this.getNumber(timer.get1MinuteRate());\n        fields[`${fieldNamePrefix}m5_rate`] = this.getNumber(timer.get5MinuteRate());\n        fields[`${fieldNamePrefix}max`] = this.getNumber(snapshot.getMax());\n        fields[`${fieldNamePrefix}mean`] = this.getNumber(snapshot.getMean());\n        fields[`${fieldNamePrefix}mean_rate`] = this.getNumber(timer.getMeanRate());\n        fields[`${fieldNamePrefix}min`] = this.getNumber(snapshot.getMin());\n        fields[`${fieldNamePrefix}p50`] = this.getNumber(snapshot.getMedian());\n        fields[`${fieldNamePrefix}p75`] = this.getNumber(snapshot.get75thPercentile());\n        fields[`${fieldNamePrefix}p95`] = this.getNumber(snapshot.get95thPercentile());\n        fields[`${fieldNamePrefix}p98`] = this.getNumber(snapshot.get98thPercentile());\n        fields[`${fieldNamePrefix}p99`] = this.getNumber(snapshot.get99thPercentile());\n        fields[`${fieldNamePrefix}p999`] = this.getNumber(snapshot.get999thPercentile());\n        fields[`${fieldNamePrefix}stddev`] = this.getNumber(snapshot.getStdDev());\n\n        return {\n            fields,\n            measurement,\n            tags: this.buildTags(timer),\n            timestamp: date,\n        };\n    }\n\n    /**\n     * Builds the prefix for a field name.\n     *\n     * @private\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof InfluxMetricReporter\n     */\n    private getFieldNamePrefix(metric: Metric): string {\n        if (metric.getGroup()) {\n            return `${metric.getName()}.`;\n        }\n        return \"\";\n    }\n\n    /**\n     * Builds the prefix for the metric name.\n     *\n     * @private\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof InfluxMetricReporter\n     */\n    private getMeasurementName(metric: Metric): string {\n        if (metric.getGroup()) {\n            return metric.getGroup();\n        }\n        return metric.getName();\n    }\n\n    /**\n     * Builds the tags using the metric's tags and this reportes tags.\n     *\n     * @private\n     * @param {Taggable} taggable\n     * @returns {{ [key: string]: string }}\n     * @memberof InfluxMetricReporter\n     */\n    private buildTags(taggable: Taggable): { [key: string]: string } {\n        const tags: { [x: string]: string } = {};\n        this.tags.forEach((tag, key) => tags[key] = tag);\n        taggable.getTags().forEach((tag, key) => tags[key] = tag);\n        return tags;\n    }\n\n    /**\n     * Uses the sender to report the given data points.\n     *\n     * @private\n     * @param {IPoint[]} points\n     * @param {MetricType} type\n     * @memberof InfluxMetricReporter\n     */\n    private sendPoints(points: IPoint[], type: MetricType) {\n        this.queue.push(async (callback: () => void) => {\n            try {\n                await this.sender.send(points);\n                if (this.log) {\n                    this.log.debug(`wrote ${type} metrics`, this.logMetadata);\n                }\n            } catch (reason) {\n                if (this.log) {\n                    this.log.error(`error writing ${type} metrics - reason: ${reason}`, reason, this.logMetadata);\n                }\n            } finally {\n                callback();\n            }\n        });\n    }\n\n    /**\n     * Either gets 0 or the specifed value.\n     *\n     * @private\n     * @param {number} value\n     * @returns {number}\n     * @memberof InfluxMetricReporter\n     */\n    private getNumber(value: number): number {\n        if (isNaN(value)) {\n            return 0;\n        }\n        return value;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                lib/metrics/DefaultSender.ts\n            \n            \n                class\n            \n            \n                DefaultSender\n            \n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                lib/metrics/InfluxMetricReporter.ts\n            \n            \n                class\n            \n            \n                InfluxMetricReporter\n            \n            \n                100 %\n                (33/33)\n            \n        \n        \n            \n                \n                lib/metrics/InfluxMetricReporter.ts\n            \n            \n                interface\n            \n            \n                MetricEntry\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/metrics/InfluxMetricReporter.ts\n            \n            \n                interface\n            \n            \n                Sender\n            \n            \n                100 %\n                (4/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            async : ^2.6.1\n        \n            influx : ^5.0.7\n        \n            inspector-metrics : ^1.11.0\n        \n            source-map-support : ^0.5.9\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\ninspector-influx\nTypescript Metrics Reporter for\nInfluxDB.\n\n    \n        \n    \n    \n        \n    \n    \n        \n    \n    \n        \n    \n\n\nThis library is made for inspector-metrics node module and\nis meant to be used with typescript / nodejs.It uses node-influx as influxdb client.\ninstall\nnpm install --save inspector-influx\nbasic usage\nimport { InfluxMetricReporter } from \"inspector-influx\";\nimport { MetricRegistry, Timer } from \"inspector-metrics\";\n\n// influxdb config from https://github.com/node-influx/node-influx/blob/master/src/index.ts#L80\nconst dbConfig = {\n    \"username\": \"admin\",\n    \"password\": \"admin\",\n    \"database\": \"example-db\",\n    \"hosts\": [\n        { \"host\": \"influx\", \"port\": 8086 }\n    ]\n};\n\nconst reporter: InfluxMetricReporter = new InfluxMetricReporter(dbConfig);\nconst registry: MetricRegistry = new MetricRegistry();\nconst requests: Timer = registry.newTimer(\"requests\");\n\nreporter.setLog(global.console);\nreporter.addMetricRegistry(registry);\n\nreporter.start();\n\n// example usage\nsetInterval(() => {\n    // should report a few milliseconds\n    requests.time(() => {\n        let a = 0;\n        let b = 1;\n        for (let i = 0; i License\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2017 \nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            MetricType   (lib/.../InfluxMetricReporter.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/metrics/InfluxMetricReporter.ts\n    \n        \n            \n                \n                    \n                        \n                        MetricType\n                    \n                \n                    \n                        \n                            Enumeration of all metric types.\n\n                        \n                    \n                \n                    \n                        MetricType:     \"counter\" | \"gauge\" | \"histogram\" | \"meter\" | \"timer\"\n\n                    \n                \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"unit-test.html":{"url":"unit-test.html","title":"unit-test - unit-test","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Unit test coverage\n\n\n\n    \n    \n    \n    \n\n\n\n    \n        \n            File\n            Statements\n            Branches\n            Functions\n            Lines\n        \n    \n    \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
